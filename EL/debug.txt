[W] invalid operator precedence grammar, precedence (newline, ;) : (<, >)
[W] invalid operator precedence grammar, precedence (;, ;) : (>, <)
[W] invalid operator precedence grammar, precedence (newline, ;) : (<, >)
[W] invalid operator precedence grammar, precedence (newline, newline) : (>, <)
[W] invalid operator precedence grammar, precedence (newline, newline) : (>, <)
[W] invalid operator precedence grammar, precedence (newline, end) : (=, >)
[W] invalid operator precedence grammar, precedence (newline, end) : (=, >)
[W] invalid operator precedence grammar, precedence (newline, newline) : (>, <)
[W] invalid operator precedence grammar, precedence (newline, else) : (=, >)
[W] invalid operator precedence grammar, precedence (newline, newline) : (>, <)
[W] invalid operator precedence grammar, precedence (newline, else) : (=, >)
[W] invalid operator precedence grammar, precedence (newline, end) : (=, >)
[W] invalid operator precedence grammar, precedence (newline, newline) : (>, =)
[W] invalid operator precedence grammar, precedence (newline, newline) : (>, <)
=================== Grammars ===================
$program              $stmt_seq
$stmt_seq             $stmt_seq newline $stmt|$stmt_seq ; $stmt|$stmt_seq newline|$stmt_seq ;|newline $stmt_seq|$stmt
$stmt                 $if_stmt|$repeat_stmt|$assign_stmt|$read_stmt|$write_stmt|$empty_stmt
$empty_stmt           ;
$if_stmt              if $exp then newline end|if $exp then newline $stmt_seq end|if $exp then newline else end|if $exp then newline else $stmt_seq end|if $exp then newline $stmt_seq else end|if $exp then newline $stmt_seq else $stmt_seq end
$repeat_stmt          repeat newline until $exp|repeat newline $stmt_seq newline until $exp
$assign_stmt          identifier =  $exp
$read_stmt            read identifier
$write_stmt           write identifier
$exp                  $simple_exp <  $simple_exp|$simple_exp <= $simple_exp|$simple_exp == $simple_exp|$simple_exp >= $simple_exp|$simple_exp >  $simple_exp|$simple_exp
$simple_exp           $simple_exp - $term|$simple_exp + $term|$term
$term                 $term / $factor|$term * $factor|$factor
$factor               ( $exp )|number|identifier

=============== TerminalSymbols ================
( ) * + - / ; <  <= =  == >  >= else end epsilon identifier if newline number read repeat string then until write zero

============== NonterminalSymbols ==============
$assign_stmt $empty_stmt $exp $factor $if_stmt $program $read_stmt $repeat_stmt $simple_exp $stmt $stmt_seq $term $write_stmt

=================== FirstVt ====================
$program              {newline identifier ; if repeat read write}
$stmt_seq             {newline identifier ; if repeat read write}
$stmt                 {identifier ; if repeat read write}
$if_stmt              {if}
$repeat_stmt          {repeat}
$assign_stmt          {identifier}
$read_stmt            {read}
$write_stmt           {write}
$empty_stmt           {;}
$exp                  {number identifier <  <= == >= >  + - * / (}
$simple_exp           {number identifier + - * / (}
$term                 {number identifier * / (}
$factor               {number identifier (}

==================== LastVt ====================
$program              {number newline identifier ; end until =  <  <= == >= >  + - * / )}
$stmt_seq             {number newline identifier ; end until =  <  <= == >= >  + - * / )}
$stmt                 {number identifier ; end until =  <  <= == >= >  + - * / )}
$if_stmt              {end}
$repeat_stmt          {number identifier until <  <= == >= >  + - * / )}
$assign_stmt          {number identifier =  <  <= == >= >  + - * / )}
$read_stmt            {identifier}
$write_stmt           {identifier}
$empty_stmt           {;}
$exp                  {number identifier <  <= == >= >  + - * / )}
$simple_exp           {number identifier + - * / )}
$term                 {number identifier * / )}
$factor               {number identifier )}

=========== OperatorPrecedenceTable ============
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|            |  (|  )|  *|  +|  -|  /|  ;|  < |  <=|  = |  ==|  > |  >=|  else|  end|  epsilon|  identifier|  if|  newline|  number|  read|  repeat|  string|  then|  until|  write|  zero|
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|           (|  <|  =|  <|  <|  <|  <|   |   <|   <|    |   <|   <|   <|      |     |         |           <|    |         |       <|      |        |        |      |       |       |     >|
|           )|   |  >|  >|  >|  >|  >|  >|   >|   >|    |   >|   >|   >|     >|    >|         |            |    |        >|        |      |        |        |     >|       |       |     >|
|           *|  <|  >|  >|  >|  >|  >|  >|   >|   >|    |   >|   >|   >|     >|    >|         |           <|    |        >|       <|      |        |        |     >|       |       |     >|
|           +|  <|  >|  <|  >|  >|  <|  >|   >|   >|    |   >|   >|   >|     >|    >|         |           <|    |        >|       <|      |        |        |     >|       |       |     >|
|           -|  <|  >|  <|  >|  >|  <|  >|   >|   >|    |   >|   >|   >|     >|    >|         |           <|    |        >|       <|      |        |        |     >|       |       |     >|
|           /|  <|  >|  >|  >|  >|  >|  >|   >|   >|    |   >|   >|   >|     >|    >|         |           <|    |        >|       <|      |        |        |     >|       |       |     >|
|           ;|   |   |   |   |   |   |  >|    |    |    |    |    |    |     >|    >|         |           <|   <|        >|        |     <|       <|        |      |       |      <|     >|
|          < |  <|  >|  <|  <|  <|  <|  >|    |    |    |    |    |    |     >|    >|         |           <|    |        >|       <|      |        |        |     >|       |       |     >|
|          <=|  <|  >|  <|  <|  <|  <|  >|    |    |    |    |    |    |     >|    >|         |           <|    |        >|       <|      |        |        |     >|       |       |     >|
|          = |  <|   |  <|  <|  <|  <|  >|   <|   <|    |   <|   <|   <|     >|    >|         |           <|    |        >|       <|      |        |        |      |       |       |     >|
|          ==|  <|  >|  <|  <|  <|  <|  >|    |    |    |    |    |    |     >|    >|         |           <|    |        >|       <|      |        |        |     >|       |       |     >|
|          > |  <|  >|  <|  <|  <|  <|  >|    |    |    |    |    |    |     >|    >|         |           <|    |        >|       <|      |        |        |     >|       |       |     >|
|          >=|  <|  >|  <|  <|  <|  <|  >|    |    |    |    |    |    |     >|    >|         |           <|    |        >|       <|      |        |        |     >|       |       |     >|
|        else|   |   |   |   |   |   |  <|    |    |    |    |    |    |      |    =|         |           <|   <|        <|        |     <|       <|        |      |       |      <|     >|
|         end|   |   |   |   |   |   |  >|    |    |    |    |    |    |     >|    >|         |            |    |        >|        |      |        |        |      |       |       |     >|
|     epsilon|   |   |   |   |   |   |   |    |    |    |    |    |    |      |     |         |            |    |         |        |      |        |        |      |       |       |     >|
|  identifier|   |  >|  >|  >|  >|  >|  >|   >|   >|   =|   >|   >|   >|     >|    >|         |            |    |        >|        |      |        |        |     >|       |       |     >|
|          if|  <|   |  <|  <|  <|  <|   |   <|   <|    |   <|   <|   <|      |     |         |           <|    |         |       <|      |        |        |     =|       |       |     >|
|     newline|   |   |   |   |   |   |  <|    |    |    |    |    |    |     =|    =|         |           <|   <|        >|        |     <|       <|        |      |      =|      <|     >|
|      number|   |  >|  >|  >|  >|  >|  >|   >|   >|    |   >|   >|   >|     >|    >|         |            |    |        >|        |      |        |        |     >|       |       |     >|
|        read|   |   |   |   |   |   |   |    |    |    |    |    |    |      |     |         |           =|    |         |        |      |        |        |      |       |       |     >|
|      repeat|   |   |   |   |   |   |   |    |    |    |    |    |    |      |     |         |            |    |        =|        |      |        |        |      |       |       |     >|
|      string|   |   |   |   |   |   |   |    |    |    |    |    |    |      |     |         |            |    |         |        |      |        |        |      |       |       |     >|
|        then|   |   |   |   |   |   |   |    |    |    |    |    |    |      |     |         |            |    |        =|        |      |        |        |      |       |       |     >|
|       until|  <|   |  <|  <|  <|  <|  >|   <|   <|    |   <|   <|   <|     >|    >|         |           <|    |        >|       <|      |        |        |      |       |       |     >|
|       write|   |   |   |   |   |   |   |    |    |    |    |    |    |      |     |         |           =|    |         |        |      |        |        |      |       |       |     >|
|        zero|  <|  <|  <|  <|  <|  <|  <|   <|   <|   <|   <|   <|   <|     <|    <|        <|           <|   <|        <|       <|     <|       <|       <|     <|      <|      <|      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

1	Reduce `read identifier` to `$read_stmt`
2	Reduce `write identifier` to `$write_stmt`
3	Reduce `$read_stmt newline $write_stmt` to `$stmt_seq`
4	Reduce `number` to `$factor`
5	Reduce `identifier` to `$factor`
6	Reduce `$factor <  $factor` to `$exp`
7	Reduce `number` to `$factor`
8	Reduce `identifier =  $factor` to `$assign_stmt`
[E] failed to reduce `if $exp then newline $assign_stmt` at 5:11
