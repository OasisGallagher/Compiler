[W] production $program : $stmt_seq will be omitted.
[W] production $stmt_seq : $stmt will be omitted.
[W] production $stmt : $if_stmt will be omitted.
[W] production $stmt : $repeat_stmt will be omitted.
[W] production $stmt : $assign_stmt will be omitted.
[W] production $stmt : $read_stmt will be omitted.
[W] production $stmt : $write_stmt will be omitted.
[W] production $exp : $simple_exp will be omitted.
[W] production $simple_exp : $term will be omitted.
[W] production $term : $factor will be omitted.
[W] invalid operator precedence grammar, precedence (;, ;) : (>, <)
=================== Grammars ===================
$program              $stmt_seq
$stmt_seq             $stmt_seq ; $stmt|$stmt_seq ;|$stmt
$stmt                 $if_stmt|$repeat_stmt|$assign_stmt|$read_stmt|$write_stmt|;
$if_stmt              if $exp then end|if $exp then $stmt_seq end|if $exp then else end|if $exp then else $stmt_seq end|if $exp then $stmt_seq else end|if $exp then $stmt_seq else $stmt_seq end
$repeat_stmt          repeat until $exp|repeat $stmt_seq until $exp
$assign_stmt          identifier =  $exp
$read_stmt            read identifier
$write_stmt           write identifier
$exp                  $simple_exp <  $simple_exp|$simple_exp <= $simple_exp|$simple_exp == $simple_exp|$simple_exp >= $simple_exp|$simple_exp >  $simple_exp|$simple_exp
$simple_exp           $simple_exp - $term|$simple_exp + $term|$term
$term                 $term / $factor|$term * $factor|$factor
$factor               ( $exp )|number|identifier

=============== TerminalSymbols ================
( ) * + - / ; <  <= =  == >  >= else end epsilon identifier if number read repeat string then until write zero

============== NonterminalSymbols ==============
$assign_stmt $exp $factor $if_stmt $program $read_stmt $repeat_stmt $simple_exp $stmt $stmt_seq $term $write_stmt

=================== FirstVt ====================
$read_stmt            {read}
$program              {repeat ; identifier read write if}
$stmt_seq             {repeat ; identifier read write if}
$assign_stmt          {identifier}
$exp                  {number identifier <  / >  ( - <= + >= == *}
$simple_exp           {number identifier / ( - + *}
$if_stmt              {if}
$stmt                 {repeat ; identifier read write if}
$repeat_stmt          {repeat}
$write_stmt           {write}
$factor               {number identifier (}
$term                 {number identifier / ( *}

==================== LastVt ====================
$read_stmt            {identifier}
$program              {number ; end =  identifier <  until / >  - <= + >= ) == *}
$stmt_seq             {number ; end =  identifier <  until / >  - <= + >= ) == *}
$assign_stmt          {number =  identifier <  / >  - <= + >= ) == *}
$exp                  {number identifier <  / >  - <= + >= ) == *}
$simple_exp           {number identifier / - + ) *}
$if_stmt              {end}
$stmt                 {number ; end =  identifier <  until / >  - <= + >= ) == *}
$repeat_stmt          {number identifier <  until / >  - <= + >= ) == *}
$write_stmt           {identifier}
$factor               {number identifier )}
$term                 {number identifier / ) *}

=========== OperatorPrecedenceTable ============
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|            |  (|  )|  *|  +|  -|  /|  ;|  < |  <=|  = |  ==|  > |  >=|  else|  end|  epsilon|  identifier|  if|  number|  read|  repeat|  string|  then|  until|  write|  zero|
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|           (|  <|  =|  <|  <|  <|  <|   |   <|   <|    |   <|   <|   <|      |     |         |           <|    |       <|      |        |        |      |       |       |     >|
|           )|   |  >|  >|  >|  >|  >|  >|   >|   >|    |   >|   >|   >|     >|    >|         |            |    |        |      |        |        |     >|      >|       |     >|
|           *|  <|  >|  >|  >|  >|  >|  >|   >|   >|    |   >|   >|   >|     >|    >|         |           <|    |       <|      |        |        |     >|      >|       |     >|
|           +|  <|  >|  <|  >|  >|  <|  >|   >|   >|    |   >|   >|   >|     >|    >|         |           <|    |       <|      |        |        |     >|      >|       |     >|
|           -|  <|  >|  <|  >|  >|  <|  >|   >|   >|    |   >|   >|   >|     >|    >|         |           <|    |       <|      |        |        |     >|      >|       |     >|
|           /|  <|  >|  >|  >|  >|  >|  >|   >|   >|    |   >|   >|   >|     >|    >|         |           <|    |       <|      |        |        |     >|      >|       |     >|
|           ;|   |   |   |   |   |   |  >|    |    |    |    |    |    |     >|    >|         |           <|   <|        |     <|       <|        |      |      >|      <|     >|
|          < |  <|  >|  <|  <|  <|  <|  >|    |    |    |    |    |    |     >|    >|         |           <|    |       <|      |        |        |     >|      >|       |     >|
|          <=|  <|  >|  <|  <|  <|  <|  >|    |    |    |    |    |    |     >|    >|         |           <|    |       <|      |        |        |     >|      >|       |     >|
|          = |  <|   |  <|  <|  <|  <|  >|   <|   <|    |   <|   <|   <|     >|    >|         |           <|    |       <|      |        |        |      |      >|       |     >|
|          ==|  <|  >|  <|  <|  <|  <|  >|    |    |    |    |    |    |     >|    >|         |           <|    |       <|      |        |        |     >|      >|       |     >|
|          > |  <|  >|  <|  <|  <|  <|  >|    |    |    |    |    |    |     >|    >|         |           <|    |       <|      |        |        |     >|      >|       |     >|
|          >=|  <|  >|  <|  <|  <|  <|  >|    |    |    |    |    |    |     >|    >|         |           <|    |       <|      |        |        |     >|      >|       |     >|
|        else|   |   |   |   |   |   |  <|    |    |    |    |    |    |      |    =|         |           <|   <|        |     <|       <|        |      |       |      <|     >|
|         end|   |   |   |   |   |   |  >|    |    |    |    |    |    |     >|    >|         |            |    |        |      |        |        |      |      >|       |     >|
|     epsilon|   |   |   |   |   |   |   |    |    |    |    |    |    |      |     |         |            |    |        |      |        |        |      |       |       |     >|
|  identifier|   |  >|  >|  >|  >|  >|  >|   >|   >|   =|   >|   >|   >|     >|    >|         |            |    |        |      |        |        |     >|      >|       |     >|
|          if|  <|   |  <|  <|  <|  <|   |   <|   <|    |   <|   <|   <|      |     |         |           <|    |       <|      |        |        |     =|       |       |     >|
|      number|   |  >|  >|  >|  >|  >|  >|   >|   >|    |   >|   >|   >|     >|    >|         |            |    |        |      |        |        |     >|      >|       |     >|
|        read|   |   |   |   |   |   |   |    |    |    |    |    |    |      |     |         |           =|    |        |      |        |        |      |       |       |     >|
|      repeat|   |   |   |   |   |   |  <|    |    |    |    |    |    |      |     |         |           <|   <|        |     <|       <|        |      |      =|      <|     >|
|      string|   |   |   |   |   |   |   |    |    |    |    |    |    |      |     |         |            |    |        |      |        |        |      |       |       |     >|
|        then|   |   |   |   |   |   |  <|    |    |    |    |    |    |     =|    =|         |           <|   <|        |     <|       <|        |      |       |      <|     >|
|       until|  <|   |  <|  <|  <|  <|  >|   <|   <|    |   <|   <|   <|     >|    >|         |           <|    |       <|      |        |        |      |      >|       |     >|
|       write|   |   |   |   |   |   |   |    |    |    |    |    |    |      |     |         |           =|    |        |      |        |        |      |       |       |     >|
|        zero|  <|  <|  <|  <|  <|  <|  <|   <|   <|   <|   <|   <|   <|     <|    <|        <|           <|   <|       <|     <|       <|       <|     <|      <|      <|      |
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

1	Reduce `;` to `$stmt`
2	Reduce `$stmt ;` to `$stmt_seq`
3	Reduce `read identifier` to `$read_stmt`
4	Reduce `$stmt_seq ; $read_stmt` to `$stmt_seq`
5	Reduce `number` to `$factor`
6	Reduce `identifier` to `$factor`
7	Reduce `$factor <  $factor` to `$exp`
8	Reduce `number` to `$factor`
9	Reduce `identifier =  $factor` to `$assign_stmt`
10	Reduce `identifier` to `$factor`
11	Reduce `identifier` to `$factor`
12	Reduce `$factor * $factor` to `$term`
13	Reduce `identifier =  $term` to `$assign_stmt`
14	Reduce `identifier` to `$factor`
15	Reduce `number` to `$factor`
16	Reduce `$factor + $factor` to `$simple_exp`
17	Reduce `identifier =  $simple_exp` to `$assign_stmt`
18	Reduce `$assign_stmt ; $assign_stmt` to `$stmt_seq`
19	Reduce `$stmt_seq ;` to `$stmt_seq`
20	Reduce `identifier` to `$factor`
21	Reduce `number` to `$factor`
22	Reduce `$factor == $factor` to `$exp`
23	Reduce `repeat $stmt_seq until $exp` to `$repeat_stmt`
24	Reduce `$assign_stmt ; $repeat_stmt` to `$stmt_seq`
25	Reduce `write identifier` to `$write_stmt`
26	Reduce `$stmt_seq ; $write_stmt` to `$stmt_seq`
27	Reduce `$stmt_seq ;` to `$stmt_seq`
28	Reduce `if $exp then $stmt_seq end` to `$if_stmt`
29	Reduce `$stmt_seq ; $if_stmt` to `$stmt_seq`
30	Reduce `$stmt_seq ;` to `$stmt_seq`
31	Reduce `identifier` to `$factor`
32	Reduce `number` to `$factor`
33	Reduce `$factor >= $factor` to `$exp`
[E] failed to reduce at 14:14
