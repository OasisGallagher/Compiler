"build parser" at 14:35:07.
"create LR0 itemsets" at 14:35:07.
"create LR0 itemsets" costs 124.68 seconds.
"calculate forwards and propagations" at 14:37:12.
"add forwards and propagations" at 14:37:12.
"add forwards and propagations" costs 158.57 seconds.
"clean up" at 14:39:51.
"clean up" costs 0.16 seconds.
"calculate forwards and propagations" costs 158.74 seconds.
"propagate forwards" at 14:39:51.
"propagate forwards" costs 2.20 seconds.
"create parsing table" at 14:39:53.
[W] CONFLICT: ((27) { { Statement : ， EmptyStatement, ( }/number/string/identifier/;/var/if/{/function/break/return/while/continue/(/for/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { Statement : ， ExpressionStatement ;, ( }/number/string/identifier/;/var/if/{/function/break/return/while/continue/(/for/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { Statement : ， VariableDefination ;, ( }/number/string/identifier/;/var/if/{/function/break/return/while/continue/(/for/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { Statement : ， Block, ( }/number/string/identifier/;/var/if/{/function/break/return/while/continue/(/for/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { Statement : ， IfStatement, ( }/number/string/identifier/;/var/if/{/function/break/return/while/continue/(/for/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { Statement : ， WhileStatement, ( }/number/string/identifier/;/var/if/{/function/break/return/while/continue/(/for/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { Statement : ， ForStatement, ( }/number/string/identifier/;/var/if/{/function/break/return/while/continue/(/for/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { Statement : ， ContinueStatement ;, ( }/number/string/identifier/;/var/if/{/function/break/return/while/continue/(/for/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { Statement : ， BreakStatement ;, ( }/number/string/identifier/;/var/if/{/function/break/return/while/continue/(/for/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { Statement : ， ReturnStatement ;, ( }/number/string/identifier/;/var/if/{/function/break/return/while/continue/(/for/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { EmptyStatement : ， ;, ( }/number/string/identifier/;/var/if/{/function/break/return/while/continue/(/for/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { ExpressionStatement : ， Expression, ( ; ) }, { VariableDefination : ， var VariableDeclarationList, ( ; ) }, { Block : ， { BlockStatements }, ( }/number/string/identifier/;/var/if/{/function/break/return/while/continue/(/for/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { Block : { ， BlockStatements }, ( zero/number/string/identifier/;/var/if/{/function/break/return/while/continue/(/for/+/-/delete/void/++/--/~/!/new/[/this/null/true/false/}/else ) }, { BlockStatements : ， epsilon, ( } ) }, { BlockStatements : ， BlockStatementsPrefix, ( } ) }, { BlockStatementsPrefix : ， Statement, ( }/number/string/identifier/;/var/if/{/function/break/return/while/continue/(/for/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { BlockStatementsPrefix : ， BlockStatementsPrefix Statement, ( }/number/string/identifier/;/var/if/{/function/break/return/while/continue/(/for/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { IfStatement : ， if ParenthesizedExpression Statement, ( }/number/string/identifier/;/var/if/{/function/break/return/while/continue/(/for/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { IfStatement : ， if ParenthesizedExpression Statement else Statement, ( }/number/string/identifier/;/var/if/{/function/break/return/while/continue/(/for/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { WhileStatement : ， while ParenthesizedExpression Statement, ( }/number/string/identifier/;/var/if/{/function/break/return/while/continue/(/for/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { ForStatement : ， for ( ForInitializer ; OptionalExpession ; OptionalExpession ) Statement, ( }/number/string/identifier/;/var/if/{/function/break/return/while/continue/(/for/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { ContinueStatement : ， continue, ( ; ) }, { BreakStatement : ， break, ( ; ) }, { ReturnStatement : ， return OptionalExpession, ( ; ) }, { AnonymousFunction : ， function FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { NamedFunction : ， function Identifier FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { Expression : ， AssignmentExpression, ( ;/, ) }, { Expression : ， Expression , AssignmentExpression, ( ;/, ) }, { AssignmentExpression : ， ConditionalExpression, ( ;/, ) }, { AssignmentExpression : ， LeftSideExpression = AssignmentExpression, ( ;/, ) }, { AssignmentExpression : ， LeftSideExpression CompoundAssignment AssignmentExpression, ( ;/, ) }, { ConditionalExpression : ， LogicalOrExpression, ( ;/, ) }, { ConditionalExpression : ， LogicalOrExpression ? AssignmentExpression : AssignmentExpression, ( ;/, ) }, { LogicalOrExpression : ， BitwiseAndExpression, ( ;/,/?/|| ) }, { LogicalOrExpression : ， LogicalOrExpression || BitwiseAndExpression, ( ;/,/?/|| ) }, { BitwiseAndExpression : ， EqualityExpression, ( ;/,/?/||/& ) }, { BitwiseAndExpression : ， BitwiseAndExpression & EqualityExpression, ( ;/,/?/||/& ) }, { EqualityExpression : ， RelationalExpression, ( ;/,/?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression == RelationalExpression, ( ;/,/?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression != RelationalExpression, ( ;/,/?/||/&/==/!= ) }, { RelationalExpression : ， ShiftExpression, ( ;/,/?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression < ShiftExpression, ( ;/,/?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression > ShiftExpression, ( ;/,/?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression <= ShiftExpression, ( ;/,/?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression >= ShiftExpression, ( ;/,/?/||/&/==/!=/</>/<=/>= ) }, { ShiftExpression : ， AdditiveExpression, ( ;/,/?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression << AdditiveExpression, ( ;/,/?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression >> AdditiveExpression, ( ;/,/?/||/&/==/!=/</>/<=/>=/<</>> ) }, { AdditiveExpression : ， MultiplicativeExpression, ( ;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression + MultiplicativeExpression, ( ;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression - MultiplicativeExpression, ( ;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { MultiplicativeExpression : ， UnaryExpression, ( ;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression * UnaryExpression, ( ;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression / UnaryExpression, ( ;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression % UnaryExpression, ( ;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， PostfixExpression, ( ;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， delete LeftSideExpression, ( ;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， void UnaryExpression, ( ;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ++ LeftSideExpression, ( ;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， -- LeftSideExpression, ( ;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， + UnaryExpression, ( ;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， - UnaryExpression, ( ;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ~ UnaryExpression, ( ;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ! UnaryExpression, ( ;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression, ( ;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression ++, ( ;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression --, ( ;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { LeftSideExpression : ， CallExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { LeftSideExpression : ， ShortNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， PrimaryExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， FullNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression MemberOperator, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FullNewExpression : ， new FullNewSubexpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ShortNewExpression : ， new ShortNewSubexpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ElementList ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : { ， }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { FieldList }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : { ， FieldList }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FieldList : ， LiteralField, ( }/, ) }, { FieldList : ， FieldList , LiteralField, ( }/, ) }, { LiteralField : ， Identifier : AssignmentExpression, ( }/, ) }, { FunctionExpression : ， AnonymousFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， NamedFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， SimpleExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， FunctionExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， ObjectLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， this, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， null, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， true, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， false, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， String, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ParenthesizedExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ArrayLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ParenthesizedExpression : ， ( Expression ), ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Identifier : ， identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/--/: ) }, { Number : ， number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { String : ， string, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, }) => ((r786432), (s72))
[W] CONFLICT: ((88) { { VariableDefination : var VariableDeclarationList ，, ( ;/, ) }, { VariableDeclarationList : VariableDeclarationList ， , VariableDefination, ( ;/, ) } }, ,) => ((r458752), (s154))
[W] CONFLICT: ((152) { { IfStatement : if ParenthesizedExpression Statement ，, ( zero/number/string/identifier/;/var/if/{/function/break/return/while/continue/(/for/+/-/delete/void/++/--/~/!/new/[/this/null/true/false/}/else ) }, { IfStatement : if ParenthesizedExpression Statement ， else Statement, ( zero/number/string/identifier/;/var/if/{/function/break/return/while/continue/(/for/+/-/delete/void/++/--/~/!/new/[/this/null/true/false/}/else ) } }, else) => ((r917504), (s202))
[W] CONFLICT: ((52) { { FunctionDefinition : NamedFunction ，, ( zero/number/string/identifier/;/var/if/{/function/break/return/while/continue/(/for/+/-/delete/void/++/--/~/!/new/[/this/null/true/false/} ) }, { FunctionExpression : NamedFunction ，, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, [) => ((r1376256), (r3932161))
[W] CONFLICT: ((52) { { FunctionDefinition : NamedFunction ，, ( zero/number/string/identifier/;/var/if/{/function/break/return/while/continue/(/for/+/-/delete/void/++/--/~/!/new/[/this/null/true/false/} ) }, { FunctionExpression : NamedFunction ，, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, () => ((r1376256), (r3932161))
[W] CONFLICT: ((52) { { FunctionDefinition : NamedFunction ，, ( zero/number/string/identifier/;/var/if/{/function/break/return/while/continue/(/for/+/-/delete/void/++/--/~/!/new/[/this/null/true/false/} ) }, { FunctionExpression : NamedFunction ，, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, ;) => ((r1376256), (r3932161))
[W] CONFLICT: ((52) { { FunctionDefinition : NamedFunction ，, ( zero/number/string/identifier/;/var/if/{/function/break/return/while/continue/(/for/+/-/delete/void/++/--/~/!/new/[/this/null/true/false/} ) }, { FunctionExpression : NamedFunction ，, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, +) => ((r1376256), (r3932161))
[W] CONFLICT: ((52) { { FunctionDefinition : NamedFunction ，, ( zero/number/string/identifier/;/var/if/{/function/break/return/while/continue/(/for/+/-/delete/void/++/--/~/!/new/[/this/null/true/false/} ) }, { FunctionExpression : NamedFunction ，, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, -) => ((r1376256), (r3932161))
[W] CONFLICT: ((52) { { FunctionDefinition : NamedFunction ，, ( zero/number/string/identifier/;/var/if/{/function/break/return/while/continue/(/for/+/-/delete/void/++/--/~/!/new/[/this/null/true/false/} ) }, { FunctionExpression : NamedFunction ，, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, ++) => ((r1376256), (r3932161))
[W] CONFLICT: ((52) { { FunctionDefinition : NamedFunction ，, ( zero/number/string/identifier/;/var/if/{/function/break/return/while/continue/(/for/+/-/delete/void/++/--/~/!/new/[/this/null/true/false/} ) }, { FunctionExpression : NamedFunction ，, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/;/,/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, --) => ((r1376256), (r3932161))
[W] CONFLICT: ((126) { { AnonymousFunction : ， function FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { NamedFunction : ， function Identifier FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { AssignmentExpression : ， ConditionalExpression, (  ) }, { AssignmentExpression : ， LeftSideExpression = AssignmentExpression, (  ) }, { AssignmentExpression : LeftSideExpression = ， AssignmentExpression, ( ;/,/)/]/:/} ) }, { AssignmentExpression : ， LeftSideExpression CompoundAssignment AssignmentExpression, (  ) }, { CompoundAssignment : = ，, ( number/string/identifier/{/function/(/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { ConditionalExpression : ， LogicalOrExpression, (  ) }, { ConditionalExpression : ， LogicalOrExpression ? AssignmentExpression : AssignmentExpression, (  ) }, { LogicalOrExpression : ， BitwiseAndExpression, ( ?/|| ) }, { LogicalOrExpression : ， LogicalOrExpression || BitwiseAndExpression, ( ?/|| ) }, { BitwiseAndExpression : ， EqualityExpression, ( ?/||/& ) }, { BitwiseAndExpression : ， BitwiseAndExpression & EqualityExpression, ( ?/||/& ) }, { EqualityExpression : ， RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression == RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression != RelationalExpression, ( ?/||/&/==/!= ) }, { RelationalExpression : ， ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression < ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression > ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression <= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression >= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { ShiftExpression : ， AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression << AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression >> AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { AdditiveExpression : ， MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression + MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression - MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { MultiplicativeExpression : ， UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression * UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression / UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression % UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， PostfixExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， delete LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， void UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ++ LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， -- LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， + UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， - UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ~ UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ! UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression ++, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression --, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { LeftSideExpression : ， CallExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { LeftSideExpression : ， ShortNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， PrimaryExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， FullNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression MemberOperator, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FullNewExpression : ， new FullNewSubexpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ShortNewExpression : ， new ShortNewSubexpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ElementList ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { FieldList }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， AnonymousFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， NamedFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， SimpleExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， FunctionExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， ObjectLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， this, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， null, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， true, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， false, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， String, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ParenthesizedExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ArrayLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ParenthesizedExpression : ， ( Expression ), ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Identifier : ， identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Number : ， number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { String : ， string, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, function) => ((s14), (r2031625))
[W] CONFLICT: ((126) { { AnonymousFunction : ， function FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { NamedFunction : ， function Identifier FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { AssignmentExpression : ， ConditionalExpression, (  ) }, { AssignmentExpression : ， LeftSideExpression = AssignmentExpression, (  ) }, { AssignmentExpression : LeftSideExpression = ， AssignmentExpression, ( ;/,/)/]/:/} ) }, { AssignmentExpression : ， LeftSideExpression CompoundAssignment AssignmentExpression, (  ) }, { CompoundAssignment : = ，, ( number/string/identifier/{/function/(/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { ConditionalExpression : ， LogicalOrExpression, (  ) }, { ConditionalExpression : ， LogicalOrExpression ? AssignmentExpression : AssignmentExpression, (  ) }, { LogicalOrExpression : ， BitwiseAndExpression, ( ?/|| ) }, { LogicalOrExpression : ， LogicalOrExpression || BitwiseAndExpression, ( ?/|| ) }, { BitwiseAndExpression : ， EqualityExpression, ( ?/||/& ) }, { BitwiseAndExpression : ， BitwiseAndExpression & EqualityExpression, ( ?/||/& ) }, { EqualityExpression : ， RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression == RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression != RelationalExpression, ( ?/||/&/==/!= ) }, { RelationalExpression : ， ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression < ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression > ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression <= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression >= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { ShiftExpression : ， AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression << AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression >> AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { AdditiveExpression : ， MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression + MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression - MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { MultiplicativeExpression : ， UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression * UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression / UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression % UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， PostfixExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， delete LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， void UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ++ LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， -- LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， + UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， - UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ~ UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ! UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression ++, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression --, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { LeftSideExpression : ， CallExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { LeftSideExpression : ， ShortNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， PrimaryExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， FullNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression MemberOperator, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FullNewExpression : ， new FullNewSubexpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ShortNewExpression : ， new ShortNewSubexpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ElementList ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { FieldList }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， AnonymousFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， NamedFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， SimpleExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， FunctionExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， ObjectLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， this, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， null, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， true, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， false, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， String, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ParenthesizedExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ArrayLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ParenthesizedExpression : ， ( Expression ), ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Identifier : ， identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Number : ， number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { String : ， string, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, delete) => ((r2031625), (s11))
[W] CONFLICT: ((126) { { AnonymousFunction : ， function FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { NamedFunction : ， function Identifier FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { AssignmentExpression : ， ConditionalExpression, (  ) }, { AssignmentExpression : ， LeftSideExpression = AssignmentExpression, (  ) }, { AssignmentExpression : LeftSideExpression = ， AssignmentExpression, ( ;/,/)/]/:/} ) }, { AssignmentExpression : ， LeftSideExpression CompoundAssignment AssignmentExpression, (  ) }, { CompoundAssignment : = ，, ( number/string/identifier/{/function/(/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { ConditionalExpression : ， LogicalOrExpression, (  ) }, { ConditionalExpression : ， LogicalOrExpression ? AssignmentExpression : AssignmentExpression, (  ) }, { LogicalOrExpression : ， BitwiseAndExpression, ( ?/|| ) }, { LogicalOrExpression : ， LogicalOrExpression || BitwiseAndExpression, ( ?/|| ) }, { BitwiseAndExpression : ， EqualityExpression, ( ?/||/& ) }, { BitwiseAndExpression : ， BitwiseAndExpression & EqualityExpression, ( ?/||/& ) }, { EqualityExpression : ， RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression == RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression != RelationalExpression, ( ?/||/&/==/!= ) }, { RelationalExpression : ， ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression < ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression > ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression <= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression >= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { ShiftExpression : ， AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression << AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression >> AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { AdditiveExpression : ， MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression + MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression - MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { MultiplicativeExpression : ， UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression * UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression / UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression % UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， PostfixExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， delete LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， void UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ++ LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， -- LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， + UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， - UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ~ UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ! UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression ++, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression --, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { LeftSideExpression : ， CallExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { LeftSideExpression : ， ShortNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， PrimaryExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， FullNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression MemberOperator, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FullNewExpression : ， new FullNewSubexpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ShortNewExpression : ， new ShortNewSubexpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ElementList ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { FieldList }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， AnonymousFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， NamedFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， SimpleExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， FunctionExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， ObjectLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， this, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， null, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， true, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， false, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， String, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ParenthesizedExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ArrayLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ParenthesizedExpression : ， ( Expression ), ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Identifier : ， identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Number : ， number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { String : ， string, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, void) => ((r2031625), (s25))
[W] CONFLICT: ((126) { { AnonymousFunction : ， function FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { NamedFunction : ， function Identifier FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { AssignmentExpression : ， ConditionalExpression, (  ) }, { AssignmentExpression : ， LeftSideExpression = AssignmentExpression, (  ) }, { AssignmentExpression : LeftSideExpression = ， AssignmentExpression, ( ;/,/)/]/:/} ) }, { AssignmentExpression : ， LeftSideExpression CompoundAssignment AssignmentExpression, (  ) }, { CompoundAssignment : = ，, ( number/string/identifier/{/function/(/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { ConditionalExpression : ， LogicalOrExpression, (  ) }, { ConditionalExpression : ， LogicalOrExpression ? AssignmentExpression : AssignmentExpression, (  ) }, { LogicalOrExpression : ， BitwiseAndExpression, ( ?/|| ) }, { LogicalOrExpression : ， LogicalOrExpression || BitwiseAndExpression, ( ?/|| ) }, { BitwiseAndExpression : ， EqualityExpression, ( ?/||/& ) }, { BitwiseAndExpression : ， BitwiseAndExpression & EqualityExpression, ( ?/||/& ) }, { EqualityExpression : ， RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression == RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression != RelationalExpression, ( ?/||/&/==/!= ) }, { RelationalExpression : ， ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression < ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression > ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression <= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression >= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { ShiftExpression : ， AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression << AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression >> AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { AdditiveExpression : ， MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression + MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression - MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { MultiplicativeExpression : ， UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression * UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression / UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression % UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， PostfixExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， delete LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， void UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ++ LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， -- LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， + UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， - UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ~ UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ! UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression ++, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression --, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { LeftSideExpression : ， CallExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { LeftSideExpression : ， ShortNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， PrimaryExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， FullNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression MemberOperator, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FullNewExpression : ， new FullNewSubexpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ShortNewExpression : ， new ShortNewSubexpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ElementList ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { FieldList }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， AnonymousFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， NamedFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， SimpleExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， FunctionExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， ObjectLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， this, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， null, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， true, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， false, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， String, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ParenthesizedExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ArrayLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ParenthesizedExpression : ， ( Expression ), ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Identifier : ， identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Number : ， number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { String : ， string, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, ++) => ((r2031625), (s4))
[W] CONFLICT: ((126) { { AnonymousFunction : ， function FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { NamedFunction : ， function Identifier FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { AssignmentExpression : ， ConditionalExpression, (  ) }, { AssignmentExpression : ， LeftSideExpression = AssignmentExpression, (  ) }, { AssignmentExpression : LeftSideExpression = ， AssignmentExpression, ( ;/,/)/]/:/} ) }, { AssignmentExpression : ， LeftSideExpression CompoundAssignment AssignmentExpression, (  ) }, { CompoundAssignment : = ，, ( number/string/identifier/{/function/(/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { ConditionalExpression : ， LogicalOrExpression, (  ) }, { ConditionalExpression : ， LogicalOrExpression ? AssignmentExpression : AssignmentExpression, (  ) }, { LogicalOrExpression : ， BitwiseAndExpression, ( ?/|| ) }, { LogicalOrExpression : ， LogicalOrExpression || BitwiseAndExpression, ( ?/|| ) }, { BitwiseAndExpression : ， EqualityExpression, ( ?/||/& ) }, { BitwiseAndExpression : ， BitwiseAndExpression & EqualityExpression, ( ?/||/& ) }, { EqualityExpression : ， RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression == RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression != RelationalExpression, ( ?/||/&/==/!= ) }, { RelationalExpression : ， ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression < ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression > ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression <= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression >= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { ShiftExpression : ， AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression << AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression >> AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { AdditiveExpression : ， MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression + MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression - MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { MultiplicativeExpression : ， UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression * UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression / UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression % UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， PostfixExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， delete LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， void UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ++ LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， -- LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， + UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， - UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ~ UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ! UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression ++, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression --, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { LeftSideExpression : ， CallExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { LeftSideExpression : ， ShortNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， PrimaryExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， FullNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression MemberOperator, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FullNewExpression : ， new FullNewSubexpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ShortNewExpression : ， new ShortNewSubexpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ElementList ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { FieldList }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， AnonymousFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， NamedFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， SimpleExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， FunctionExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， ObjectLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， this, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， null, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， true, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， false, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， String, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ParenthesizedExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ArrayLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ParenthesizedExpression : ， ( Expression ), ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Identifier : ， identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Number : ， number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { String : ， string, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, --) => ((r2031625), (s6))
[W] CONFLICT: ((126) { { AnonymousFunction : ， function FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { NamedFunction : ， function Identifier FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { AssignmentExpression : ， ConditionalExpression, (  ) }, { AssignmentExpression : ， LeftSideExpression = AssignmentExpression, (  ) }, { AssignmentExpression : LeftSideExpression = ， AssignmentExpression, ( ;/,/)/]/:/} ) }, { AssignmentExpression : ， LeftSideExpression CompoundAssignment AssignmentExpression, (  ) }, { CompoundAssignment : = ，, ( number/string/identifier/{/function/(/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { ConditionalExpression : ， LogicalOrExpression, (  ) }, { ConditionalExpression : ， LogicalOrExpression ? AssignmentExpression : AssignmentExpression, (  ) }, { LogicalOrExpression : ， BitwiseAndExpression, ( ?/|| ) }, { LogicalOrExpression : ， LogicalOrExpression || BitwiseAndExpression, ( ?/|| ) }, { BitwiseAndExpression : ， EqualityExpression, ( ?/||/& ) }, { BitwiseAndExpression : ， BitwiseAndExpression & EqualityExpression, ( ?/||/& ) }, { EqualityExpression : ， RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression == RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression != RelationalExpression, ( ?/||/&/==/!= ) }, { RelationalExpression : ， ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression < ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression > ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression <= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression >= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { ShiftExpression : ， AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression << AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression >> AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { AdditiveExpression : ， MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression + MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression - MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { MultiplicativeExpression : ， UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression * UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression / UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression % UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， PostfixExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， delete LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， void UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ++ LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， -- LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， + UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， - UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ~ UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ! UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression ++, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression --, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { LeftSideExpression : ， CallExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { LeftSideExpression : ， ShortNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， PrimaryExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， FullNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression MemberOperator, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FullNewExpression : ， new FullNewSubexpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ShortNewExpression : ， new ShortNewSubexpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ElementList ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { FieldList }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， AnonymousFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， NamedFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， SimpleExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， FunctionExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， ObjectLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， this, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， null, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， true, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， false, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， String, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ParenthesizedExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ArrayLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ParenthesizedExpression : ， ( Expression ), ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Identifier : ， identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Number : ， number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { String : ， string, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, +) => ((r2031625), (s3))
[W] CONFLICT: ((126) { { AnonymousFunction : ， function FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { NamedFunction : ， function Identifier FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { AssignmentExpression : ， ConditionalExpression, (  ) }, { AssignmentExpression : ， LeftSideExpression = AssignmentExpression, (  ) }, { AssignmentExpression : LeftSideExpression = ， AssignmentExpression, ( ;/,/)/]/:/} ) }, { AssignmentExpression : ， LeftSideExpression CompoundAssignment AssignmentExpression, (  ) }, { CompoundAssignment : = ，, ( number/string/identifier/{/function/(/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { ConditionalExpression : ， LogicalOrExpression, (  ) }, { ConditionalExpression : ， LogicalOrExpression ? AssignmentExpression : AssignmentExpression, (  ) }, { LogicalOrExpression : ， BitwiseAndExpression, ( ?/|| ) }, { LogicalOrExpression : ， LogicalOrExpression || BitwiseAndExpression, ( ?/|| ) }, { BitwiseAndExpression : ， EqualityExpression, ( ?/||/& ) }, { BitwiseAndExpression : ， BitwiseAndExpression & EqualityExpression, ( ?/||/& ) }, { EqualityExpression : ， RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression == RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression != RelationalExpression, ( ?/||/&/==/!= ) }, { RelationalExpression : ， ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression < ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression > ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression <= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression >= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { ShiftExpression : ， AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression << AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression >> AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { AdditiveExpression : ， MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression + MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression - MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { MultiplicativeExpression : ， UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression * UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression / UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression % UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， PostfixExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， delete LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， void UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ++ LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， -- LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， + UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， - UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ~ UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ! UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression ++, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression --, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { LeftSideExpression : ， CallExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { LeftSideExpression : ， ShortNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， PrimaryExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， FullNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression MemberOperator, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FullNewExpression : ， new FullNewSubexpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ShortNewExpression : ， new ShortNewSubexpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ElementList ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { FieldList }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， AnonymousFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， NamedFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， SimpleExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， FunctionExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， ObjectLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， this, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， null, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， true, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， false, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， String, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ParenthesizedExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ArrayLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ParenthesizedExpression : ， ( Expression ), ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Identifier : ， identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Number : ， number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { String : ， string, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, -) => ((r2031625), (s5))
[W] CONFLICT: ((126) { { AnonymousFunction : ， function FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { NamedFunction : ， function Identifier FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { AssignmentExpression : ， ConditionalExpression, (  ) }, { AssignmentExpression : ， LeftSideExpression = AssignmentExpression, (  ) }, { AssignmentExpression : LeftSideExpression = ， AssignmentExpression, ( ;/,/)/]/:/} ) }, { AssignmentExpression : ， LeftSideExpression CompoundAssignment AssignmentExpression, (  ) }, { CompoundAssignment : = ，, ( number/string/identifier/{/function/(/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { ConditionalExpression : ， LogicalOrExpression, (  ) }, { ConditionalExpression : ， LogicalOrExpression ? AssignmentExpression : AssignmentExpression, (  ) }, { LogicalOrExpression : ， BitwiseAndExpression, ( ?/|| ) }, { LogicalOrExpression : ， LogicalOrExpression || BitwiseAndExpression, ( ?/|| ) }, { BitwiseAndExpression : ， EqualityExpression, ( ?/||/& ) }, { BitwiseAndExpression : ， BitwiseAndExpression & EqualityExpression, ( ?/||/& ) }, { EqualityExpression : ， RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression == RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression != RelationalExpression, ( ?/||/&/==/!= ) }, { RelationalExpression : ， ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression < ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression > ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression <= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression >= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { ShiftExpression : ， AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression << AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression >> AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { AdditiveExpression : ， MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression + MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression - MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { MultiplicativeExpression : ， UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression * UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression / UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression % UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， PostfixExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， delete LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， void UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ++ LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， -- LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， + UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， - UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ~ UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ! UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression ++, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression --, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { LeftSideExpression : ， CallExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { LeftSideExpression : ， ShortNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， PrimaryExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， FullNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression MemberOperator, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FullNewExpression : ， new FullNewSubexpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ShortNewExpression : ， new ShortNewSubexpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ElementList ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { FieldList }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， AnonymousFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， NamedFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， SimpleExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， FunctionExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， ObjectLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， this, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， null, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， true, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， false, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， String, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ParenthesizedExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ArrayLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ParenthesizedExpression : ， ( Expression ), ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Identifier : ， identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Number : ， number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { String : ， string, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, ~) => ((r2031625), (s28))
[W] CONFLICT: ((126) { { AnonymousFunction : ， function FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { NamedFunction : ， function Identifier FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { AssignmentExpression : ， ConditionalExpression, (  ) }, { AssignmentExpression : ， LeftSideExpression = AssignmentExpression, (  ) }, { AssignmentExpression : LeftSideExpression = ， AssignmentExpression, ( ;/,/)/]/:/} ) }, { AssignmentExpression : ， LeftSideExpression CompoundAssignment AssignmentExpression, (  ) }, { CompoundAssignment : = ，, ( number/string/identifier/{/function/(/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { ConditionalExpression : ， LogicalOrExpression, (  ) }, { ConditionalExpression : ， LogicalOrExpression ? AssignmentExpression : AssignmentExpression, (  ) }, { LogicalOrExpression : ， BitwiseAndExpression, ( ?/|| ) }, { LogicalOrExpression : ， LogicalOrExpression || BitwiseAndExpression, ( ?/|| ) }, { BitwiseAndExpression : ， EqualityExpression, ( ?/||/& ) }, { BitwiseAndExpression : ， BitwiseAndExpression & EqualityExpression, ( ?/||/& ) }, { EqualityExpression : ， RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression == RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression != RelationalExpression, ( ?/||/&/==/!= ) }, { RelationalExpression : ， ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression < ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression > ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression <= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression >= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { ShiftExpression : ， AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression << AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression >> AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { AdditiveExpression : ， MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression + MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression - MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { MultiplicativeExpression : ， UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression * UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression / UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression % UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， PostfixExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， delete LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， void UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ++ LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， -- LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， + UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， - UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ~ UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ! UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression ++, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression --, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { LeftSideExpression : ， CallExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { LeftSideExpression : ， ShortNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， PrimaryExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， FullNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression MemberOperator, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FullNewExpression : ， new FullNewSubexpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ShortNewExpression : ， new ShortNewSubexpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ElementList ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { FieldList }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， AnonymousFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， NamedFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， SimpleExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， FunctionExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， ObjectLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， this, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， null, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， true, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， false, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， String, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ParenthesizedExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ArrayLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ParenthesizedExpression : ， ( Expression ), ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Identifier : ， identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Number : ， number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { String : ， string, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, !) => ((r2031625), (s1))
[W] CONFLICT: ((126) { { AnonymousFunction : ， function FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { NamedFunction : ， function Identifier FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { AssignmentExpression : ， ConditionalExpression, (  ) }, { AssignmentExpression : ， LeftSideExpression = AssignmentExpression, (  ) }, { AssignmentExpression : LeftSideExpression = ， AssignmentExpression, ( ;/,/)/]/:/} ) }, { AssignmentExpression : ， LeftSideExpression CompoundAssignment AssignmentExpression, (  ) }, { CompoundAssignment : = ，, ( number/string/identifier/{/function/(/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { ConditionalExpression : ， LogicalOrExpression, (  ) }, { ConditionalExpression : ， LogicalOrExpression ? AssignmentExpression : AssignmentExpression, (  ) }, { LogicalOrExpression : ， BitwiseAndExpression, ( ?/|| ) }, { LogicalOrExpression : ， LogicalOrExpression || BitwiseAndExpression, ( ?/|| ) }, { BitwiseAndExpression : ， EqualityExpression, ( ?/||/& ) }, { BitwiseAndExpression : ， BitwiseAndExpression & EqualityExpression, ( ?/||/& ) }, { EqualityExpression : ， RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression == RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression != RelationalExpression, ( ?/||/&/==/!= ) }, { RelationalExpression : ， ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression < ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression > ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression <= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression >= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { ShiftExpression : ， AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression << AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression >> AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { AdditiveExpression : ， MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression + MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression - MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { MultiplicativeExpression : ， UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression * UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression / UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression % UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， PostfixExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， delete LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， void UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ++ LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， -- LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， + UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， - UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ~ UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ! UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression ++, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression --, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { LeftSideExpression : ， CallExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { LeftSideExpression : ， ShortNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， PrimaryExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， FullNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression MemberOperator, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FullNewExpression : ， new FullNewSubexpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ShortNewExpression : ， new ShortNewSubexpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ElementList ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { FieldList }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， AnonymousFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， NamedFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， SimpleExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， FunctionExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， ObjectLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， this, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， null, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， true, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， false, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， String, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ParenthesizedExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ArrayLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ParenthesizedExpression : ， ( Expression ), ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Identifier : ， identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Number : ， number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { String : ， string, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, new) => ((r2031625), (s17))
[W] CONFLICT: ((126) { { AnonymousFunction : ， function FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { NamedFunction : ， function Identifier FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { AssignmentExpression : ， ConditionalExpression, (  ) }, { AssignmentExpression : ， LeftSideExpression = AssignmentExpression, (  ) }, { AssignmentExpression : LeftSideExpression = ， AssignmentExpression, ( ;/,/)/]/:/} ) }, { AssignmentExpression : ， LeftSideExpression CompoundAssignment AssignmentExpression, (  ) }, { CompoundAssignment : = ，, ( number/string/identifier/{/function/(/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { ConditionalExpression : ， LogicalOrExpression, (  ) }, { ConditionalExpression : ， LogicalOrExpression ? AssignmentExpression : AssignmentExpression, (  ) }, { LogicalOrExpression : ， BitwiseAndExpression, ( ?/|| ) }, { LogicalOrExpression : ， LogicalOrExpression || BitwiseAndExpression, ( ?/|| ) }, { BitwiseAndExpression : ， EqualityExpression, ( ?/||/& ) }, { BitwiseAndExpression : ， BitwiseAndExpression & EqualityExpression, ( ?/||/& ) }, { EqualityExpression : ， RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression == RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression != RelationalExpression, ( ?/||/&/==/!= ) }, { RelationalExpression : ， ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression < ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression > ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression <= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression >= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { ShiftExpression : ， AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression << AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression >> AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { AdditiveExpression : ， MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression + MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression - MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { MultiplicativeExpression : ， UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression * UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression / UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression % UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， PostfixExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， delete LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， void UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ++ LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， -- LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， + UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， - UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ~ UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ! UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression ++, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression --, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { LeftSideExpression : ， CallExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { LeftSideExpression : ， ShortNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， PrimaryExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， FullNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression MemberOperator, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FullNewExpression : ， new FullNewSubexpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ShortNewExpression : ， new ShortNewSubexpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ElementList ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { FieldList }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， AnonymousFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， NamedFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， SimpleExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， FunctionExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， ObjectLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， this, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， null, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， true, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， false, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， String, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ParenthesizedExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ArrayLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ParenthesizedExpression : ， ( Expression ), ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Identifier : ， identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Number : ， number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { String : ， string, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, new) => ((r2031625), (s17))
[W] CONFLICT: ((126) { { AnonymousFunction : ， function FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { NamedFunction : ， function Identifier FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { AssignmentExpression : ， ConditionalExpression, (  ) }, { AssignmentExpression : ， LeftSideExpression = AssignmentExpression, (  ) }, { AssignmentExpression : LeftSideExpression = ， AssignmentExpression, ( ;/,/)/]/:/} ) }, { AssignmentExpression : ， LeftSideExpression CompoundAssignment AssignmentExpression, (  ) }, { CompoundAssignment : = ，, ( number/string/identifier/{/function/(/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { ConditionalExpression : ， LogicalOrExpression, (  ) }, { ConditionalExpression : ， LogicalOrExpression ? AssignmentExpression : AssignmentExpression, (  ) }, { LogicalOrExpression : ， BitwiseAndExpression, ( ?/|| ) }, { LogicalOrExpression : ， LogicalOrExpression || BitwiseAndExpression, ( ?/|| ) }, { BitwiseAndExpression : ， EqualityExpression, ( ?/||/& ) }, { BitwiseAndExpression : ， BitwiseAndExpression & EqualityExpression, ( ?/||/& ) }, { EqualityExpression : ， RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression == RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression != RelationalExpression, ( ?/||/&/==/!= ) }, { RelationalExpression : ， ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression < ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression > ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression <= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression >= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { ShiftExpression : ， AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression << AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression >> AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { AdditiveExpression : ， MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression + MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression - MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { MultiplicativeExpression : ， UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression * UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression / UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression % UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， PostfixExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， delete LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， void UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ++ LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， -- LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， + UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， - UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ~ UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ! UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression ++, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression --, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { LeftSideExpression : ， CallExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { LeftSideExpression : ， ShortNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， PrimaryExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， FullNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression MemberOperator, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FullNewExpression : ， new FullNewSubexpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ShortNewExpression : ， new ShortNewSubexpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ElementList ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { FieldList }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， AnonymousFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， NamedFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， SimpleExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， FunctionExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， ObjectLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， this, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， null, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， true, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， false, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， String, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ParenthesizedExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ArrayLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ParenthesizedExpression : ， ( Expression ), ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Identifier : ， identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Number : ， number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { String : ， string, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, [) => ((r2031625), (s8))
[W] CONFLICT: ((126) { { AnonymousFunction : ， function FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { NamedFunction : ， function Identifier FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { AssignmentExpression : ， ConditionalExpression, (  ) }, { AssignmentExpression : ， LeftSideExpression = AssignmentExpression, (  ) }, { AssignmentExpression : LeftSideExpression = ， AssignmentExpression, ( ;/,/)/]/:/} ) }, { AssignmentExpression : ， LeftSideExpression CompoundAssignment AssignmentExpression, (  ) }, { CompoundAssignment : = ，, ( number/string/identifier/{/function/(/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { ConditionalExpression : ， LogicalOrExpression, (  ) }, { ConditionalExpression : ， LogicalOrExpression ? AssignmentExpression : AssignmentExpression, (  ) }, { LogicalOrExpression : ， BitwiseAndExpression, ( ?/|| ) }, { LogicalOrExpression : ， LogicalOrExpression || BitwiseAndExpression, ( ?/|| ) }, { BitwiseAndExpression : ， EqualityExpression, ( ?/||/& ) }, { BitwiseAndExpression : ， BitwiseAndExpression & EqualityExpression, ( ?/||/& ) }, { EqualityExpression : ， RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression == RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression != RelationalExpression, ( ?/||/&/==/!= ) }, { RelationalExpression : ， ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression < ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression > ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression <= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression >= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { ShiftExpression : ， AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression << AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression >> AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { AdditiveExpression : ， MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression + MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression - MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { MultiplicativeExpression : ， UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression * UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression / UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression % UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， PostfixExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， delete LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， void UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ++ LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， -- LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， + UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， - UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ~ UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ! UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression ++, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression --, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { LeftSideExpression : ， CallExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { LeftSideExpression : ， ShortNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， PrimaryExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， FullNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression MemberOperator, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FullNewExpression : ， new FullNewSubexpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ShortNewExpression : ， new ShortNewSubexpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ElementList ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { FieldList }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， AnonymousFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， NamedFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， SimpleExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， FunctionExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， ObjectLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， this, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， null, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， true, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， false, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， String, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ParenthesizedExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ArrayLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ParenthesizedExpression : ， ( Expression ), ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Identifier : ， identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Number : ， number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { String : ， string, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, [) => ((r2031625), (s8))
[W] CONFLICT: ((126) { { AnonymousFunction : ， function FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { NamedFunction : ， function Identifier FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { AssignmentExpression : ， ConditionalExpression, (  ) }, { AssignmentExpression : ， LeftSideExpression = AssignmentExpression, (  ) }, { AssignmentExpression : LeftSideExpression = ， AssignmentExpression, ( ;/,/)/]/:/} ) }, { AssignmentExpression : ， LeftSideExpression CompoundAssignment AssignmentExpression, (  ) }, { CompoundAssignment : = ，, ( number/string/identifier/{/function/(/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { ConditionalExpression : ， LogicalOrExpression, (  ) }, { ConditionalExpression : ， LogicalOrExpression ? AssignmentExpression : AssignmentExpression, (  ) }, { LogicalOrExpression : ， BitwiseAndExpression, ( ?/|| ) }, { LogicalOrExpression : ， LogicalOrExpression || BitwiseAndExpression, ( ?/|| ) }, { BitwiseAndExpression : ， EqualityExpression, ( ?/||/& ) }, { BitwiseAndExpression : ， BitwiseAndExpression & EqualityExpression, ( ?/||/& ) }, { EqualityExpression : ， RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression == RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression != RelationalExpression, ( ?/||/&/==/!= ) }, { RelationalExpression : ， ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression < ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression > ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression <= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression >= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { ShiftExpression : ， AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression << AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression >> AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { AdditiveExpression : ， MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression + MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression - MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { MultiplicativeExpression : ， UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression * UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression / UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression % UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， PostfixExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， delete LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， void UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ++ LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， -- LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， + UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， - UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ~ UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ! UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression ++, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression --, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { LeftSideExpression : ， CallExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { LeftSideExpression : ， ShortNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， PrimaryExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， FullNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression MemberOperator, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FullNewExpression : ， new FullNewSubexpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ShortNewExpression : ， new ShortNewSubexpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ElementList ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { FieldList }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， AnonymousFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， NamedFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， SimpleExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， FunctionExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， ObjectLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， this, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， null, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， true, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， false, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， String, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ParenthesizedExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ArrayLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ParenthesizedExpression : ， ( Expression ), ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Identifier : ， identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Number : ， number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { String : ， string, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, {) => ((r2031625), (s92))
[W] CONFLICT: ((126) { { AnonymousFunction : ， function FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { NamedFunction : ， function Identifier FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { AssignmentExpression : ， ConditionalExpression, (  ) }, { AssignmentExpression : ， LeftSideExpression = AssignmentExpression, (  ) }, { AssignmentExpression : LeftSideExpression = ， AssignmentExpression, ( ;/,/)/]/:/} ) }, { AssignmentExpression : ， LeftSideExpression CompoundAssignment AssignmentExpression, (  ) }, { CompoundAssignment : = ，, ( number/string/identifier/{/function/(/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { ConditionalExpression : ， LogicalOrExpression, (  ) }, { ConditionalExpression : ， LogicalOrExpression ? AssignmentExpression : AssignmentExpression, (  ) }, { LogicalOrExpression : ， BitwiseAndExpression, ( ?/|| ) }, { LogicalOrExpression : ， LogicalOrExpression || BitwiseAndExpression, ( ?/|| ) }, { BitwiseAndExpression : ， EqualityExpression, ( ?/||/& ) }, { BitwiseAndExpression : ， BitwiseAndExpression & EqualityExpression, ( ?/||/& ) }, { EqualityExpression : ， RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression == RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression != RelationalExpression, ( ?/||/&/==/!= ) }, { RelationalExpression : ， ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression < ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression > ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression <= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression >= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { ShiftExpression : ， AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression << AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression >> AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { AdditiveExpression : ， MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression + MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression - MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { MultiplicativeExpression : ， UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression * UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression / UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression % UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， PostfixExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， delete LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， void UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ++ LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， -- LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， + UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， - UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ~ UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ! UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression ++, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression --, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { LeftSideExpression : ， CallExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { LeftSideExpression : ， ShortNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， PrimaryExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， FullNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression MemberOperator, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FullNewExpression : ， new FullNewSubexpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ShortNewExpression : ， new ShortNewSubexpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ElementList ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { FieldList }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， AnonymousFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， NamedFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， SimpleExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， FunctionExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， ObjectLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， this, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， null, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， true, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， false, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， String, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ParenthesizedExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ArrayLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ParenthesizedExpression : ， ( Expression ), ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Identifier : ， identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Number : ， number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { String : ， string, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, {) => ((r2031625), (s92))
[W] CONFLICT: ((126) { { AnonymousFunction : ， function FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { NamedFunction : ， function Identifier FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { AssignmentExpression : ， ConditionalExpression, (  ) }, { AssignmentExpression : ， LeftSideExpression = AssignmentExpression, (  ) }, { AssignmentExpression : LeftSideExpression = ， AssignmentExpression, ( ;/,/)/]/:/} ) }, { AssignmentExpression : ， LeftSideExpression CompoundAssignment AssignmentExpression, (  ) }, { CompoundAssignment : = ，, ( number/string/identifier/{/function/(/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { ConditionalExpression : ， LogicalOrExpression, (  ) }, { ConditionalExpression : ， LogicalOrExpression ? AssignmentExpression : AssignmentExpression, (  ) }, { LogicalOrExpression : ， BitwiseAndExpression, ( ?/|| ) }, { LogicalOrExpression : ， LogicalOrExpression || BitwiseAndExpression, ( ?/|| ) }, { BitwiseAndExpression : ， EqualityExpression, ( ?/||/& ) }, { BitwiseAndExpression : ， BitwiseAndExpression & EqualityExpression, ( ?/||/& ) }, { EqualityExpression : ， RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression == RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression != RelationalExpression, ( ?/||/&/==/!= ) }, { RelationalExpression : ， ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression < ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression > ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression <= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression >= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { ShiftExpression : ， AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression << AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression >> AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { AdditiveExpression : ， MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression + MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression - MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { MultiplicativeExpression : ， UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression * UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression / UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression % UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， PostfixExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， delete LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， void UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ++ LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， -- LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， + UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， - UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ~ UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ! UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression ++, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression --, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { LeftSideExpression : ， CallExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { LeftSideExpression : ， ShortNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， PrimaryExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， FullNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression MemberOperator, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FullNewExpression : ， new FullNewSubexpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ShortNewExpression : ， new ShortNewSubexpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ElementList ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { FieldList }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， AnonymousFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， NamedFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， SimpleExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， FunctionExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， ObjectLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， this, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， null, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， true, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， false, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， String, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ParenthesizedExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ArrayLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ParenthesizedExpression : ， ( Expression ), ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Identifier : ， identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Number : ， number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { String : ， string, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, this) => ((r2031625), (s22))
[W] CONFLICT: ((126) { { AnonymousFunction : ， function FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { NamedFunction : ， function Identifier FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { AssignmentExpression : ， ConditionalExpression, (  ) }, { AssignmentExpression : ， LeftSideExpression = AssignmentExpression, (  ) }, { AssignmentExpression : LeftSideExpression = ， AssignmentExpression, ( ;/,/)/]/:/} ) }, { AssignmentExpression : ， LeftSideExpression CompoundAssignment AssignmentExpression, (  ) }, { CompoundAssignment : = ，, ( number/string/identifier/{/function/(/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { ConditionalExpression : ， LogicalOrExpression, (  ) }, { ConditionalExpression : ， LogicalOrExpression ? AssignmentExpression : AssignmentExpression, (  ) }, { LogicalOrExpression : ， BitwiseAndExpression, ( ?/|| ) }, { LogicalOrExpression : ， LogicalOrExpression || BitwiseAndExpression, ( ?/|| ) }, { BitwiseAndExpression : ， EqualityExpression, ( ?/||/& ) }, { BitwiseAndExpression : ， BitwiseAndExpression & EqualityExpression, ( ?/||/& ) }, { EqualityExpression : ， RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression == RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression != RelationalExpression, ( ?/||/&/==/!= ) }, { RelationalExpression : ， ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression < ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression > ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression <= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression >= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { ShiftExpression : ， AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression << AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression >> AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { AdditiveExpression : ， MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression + MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression - MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { MultiplicativeExpression : ， UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression * UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression / UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression % UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， PostfixExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， delete LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， void UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ++ LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， -- LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， + UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， - UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ~ UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ! UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression ++, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression --, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { LeftSideExpression : ， CallExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { LeftSideExpression : ， ShortNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， PrimaryExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， FullNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression MemberOperator, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FullNewExpression : ， new FullNewSubexpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ShortNewExpression : ， new ShortNewSubexpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ElementList ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { FieldList }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， AnonymousFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， NamedFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， SimpleExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， FunctionExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， ObjectLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， this, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， null, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， true, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， false, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， String, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ParenthesizedExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ArrayLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ParenthesizedExpression : ， ( Expression ), ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Identifier : ， identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Number : ， number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { String : ， string, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, null) => ((r2031625), (s18))
[W] CONFLICT: ((126) { { AnonymousFunction : ， function FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { NamedFunction : ， function Identifier FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { AssignmentExpression : ， ConditionalExpression, (  ) }, { AssignmentExpression : ， LeftSideExpression = AssignmentExpression, (  ) }, { AssignmentExpression : LeftSideExpression = ， AssignmentExpression, ( ;/,/)/]/:/} ) }, { AssignmentExpression : ， LeftSideExpression CompoundAssignment AssignmentExpression, (  ) }, { CompoundAssignment : = ，, ( number/string/identifier/{/function/(/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { ConditionalExpression : ， LogicalOrExpression, (  ) }, { ConditionalExpression : ， LogicalOrExpression ? AssignmentExpression : AssignmentExpression, (  ) }, { LogicalOrExpression : ， BitwiseAndExpression, ( ?/|| ) }, { LogicalOrExpression : ， LogicalOrExpression || BitwiseAndExpression, ( ?/|| ) }, { BitwiseAndExpression : ， EqualityExpression, ( ?/||/& ) }, { BitwiseAndExpression : ， BitwiseAndExpression & EqualityExpression, ( ?/||/& ) }, { EqualityExpression : ， RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression == RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression != RelationalExpression, ( ?/||/&/==/!= ) }, { RelationalExpression : ， ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression < ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression > ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression <= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression >= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { ShiftExpression : ， AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression << AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression >> AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { AdditiveExpression : ， MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression + MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression - MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { MultiplicativeExpression : ， UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression * UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression / UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression % UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， PostfixExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， delete LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， void UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ++ LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， -- LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， + UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， - UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ~ UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ! UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression ++, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression --, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { LeftSideExpression : ， CallExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { LeftSideExpression : ， ShortNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， PrimaryExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， FullNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression MemberOperator, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FullNewExpression : ， new FullNewSubexpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ShortNewExpression : ， new ShortNewSubexpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ElementList ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { FieldList }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， AnonymousFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， NamedFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， SimpleExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， FunctionExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， ObjectLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， this, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， null, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， true, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， false, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， String, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ParenthesizedExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ArrayLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ParenthesizedExpression : ， ( Expression ), ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Identifier : ， identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Number : ， number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { String : ， string, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, true) => ((r2031625), (s23))
[W] CONFLICT: ((126) { { AnonymousFunction : ， function FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { NamedFunction : ， function Identifier FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { AssignmentExpression : ， ConditionalExpression, (  ) }, { AssignmentExpression : ， LeftSideExpression = AssignmentExpression, (  ) }, { AssignmentExpression : LeftSideExpression = ， AssignmentExpression, ( ;/,/)/]/:/} ) }, { AssignmentExpression : ， LeftSideExpression CompoundAssignment AssignmentExpression, (  ) }, { CompoundAssignment : = ，, ( number/string/identifier/{/function/(/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { ConditionalExpression : ， LogicalOrExpression, (  ) }, { ConditionalExpression : ， LogicalOrExpression ? AssignmentExpression : AssignmentExpression, (  ) }, { LogicalOrExpression : ， BitwiseAndExpression, ( ?/|| ) }, { LogicalOrExpression : ， LogicalOrExpression || BitwiseAndExpression, ( ?/|| ) }, { BitwiseAndExpression : ， EqualityExpression, ( ?/||/& ) }, { BitwiseAndExpression : ， BitwiseAndExpression & EqualityExpression, ( ?/||/& ) }, { EqualityExpression : ， RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression == RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression != RelationalExpression, ( ?/||/&/==/!= ) }, { RelationalExpression : ， ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression < ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression > ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression <= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression >= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { ShiftExpression : ， AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression << AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression >> AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { AdditiveExpression : ， MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression + MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression - MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { MultiplicativeExpression : ， UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression * UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression / UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression % UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， PostfixExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， delete LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， void UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ++ LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， -- LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， + UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， - UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ~ UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ! UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression ++, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression --, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { LeftSideExpression : ， CallExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { LeftSideExpression : ， ShortNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， PrimaryExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， FullNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression MemberOperator, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FullNewExpression : ， new FullNewSubexpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ShortNewExpression : ， new ShortNewSubexpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ElementList ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { FieldList }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， AnonymousFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， NamedFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， SimpleExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， FunctionExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， ObjectLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， this, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， null, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， true, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， false, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， String, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ParenthesizedExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ArrayLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ParenthesizedExpression : ， ( Expression ), ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Identifier : ， identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Number : ， number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { String : ， string, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, false) => ((r2031625), (s12))
[W] CONFLICT: ((126) { { AnonymousFunction : ， function FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { NamedFunction : ， function Identifier FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { AssignmentExpression : ， ConditionalExpression, (  ) }, { AssignmentExpression : ， LeftSideExpression = AssignmentExpression, (  ) }, { AssignmentExpression : LeftSideExpression = ， AssignmentExpression, ( ;/,/)/]/:/} ) }, { AssignmentExpression : ， LeftSideExpression CompoundAssignment AssignmentExpression, (  ) }, { CompoundAssignment : = ，, ( number/string/identifier/{/function/(/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { ConditionalExpression : ， LogicalOrExpression, (  ) }, { ConditionalExpression : ， LogicalOrExpression ? AssignmentExpression : AssignmentExpression, (  ) }, { LogicalOrExpression : ， BitwiseAndExpression, ( ?/|| ) }, { LogicalOrExpression : ， LogicalOrExpression || BitwiseAndExpression, ( ?/|| ) }, { BitwiseAndExpression : ， EqualityExpression, ( ?/||/& ) }, { BitwiseAndExpression : ， BitwiseAndExpression & EqualityExpression, ( ?/||/& ) }, { EqualityExpression : ， RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression == RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression != RelationalExpression, ( ?/||/&/==/!= ) }, { RelationalExpression : ， ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression < ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression > ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression <= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression >= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { ShiftExpression : ， AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression << AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression >> AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { AdditiveExpression : ， MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression + MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression - MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { MultiplicativeExpression : ， UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression * UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression / UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression % UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， PostfixExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， delete LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， void UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ++ LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， -- LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， + UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， - UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ~ UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ! UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression ++, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression --, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { LeftSideExpression : ， CallExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { LeftSideExpression : ， ShortNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， PrimaryExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， FullNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression MemberOperator, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FullNewExpression : ， new FullNewSubexpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ShortNewExpression : ， new ShortNewSubexpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ElementList ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { FieldList }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， AnonymousFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， NamedFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， SimpleExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， FunctionExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， ObjectLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， this, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， null, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， true, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， false, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， String, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ParenthesizedExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ArrayLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ParenthesizedExpression : ， ( Expression ), ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Identifier : ， identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Number : ， number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { String : ， string, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, () => ((r2031625), (s2))
[W] CONFLICT: ((126) { { AnonymousFunction : ， function FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { NamedFunction : ， function Identifier FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { AssignmentExpression : ， ConditionalExpression, (  ) }, { AssignmentExpression : ， LeftSideExpression = AssignmentExpression, (  ) }, { AssignmentExpression : LeftSideExpression = ， AssignmentExpression, ( ;/,/)/]/:/} ) }, { AssignmentExpression : ， LeftSideExpression CompoundAssignment AssignmentExpression, (  ) }, { CompoundAssignment : = ，, ( number/string/identifier/{/function/(/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { ConditionalExpression : ， LogicalOrExpression, (  ) }, { ConditionalExpression : ， LogicalOrExpression ? AssignmentExpression : AssignmentExpression, (  ) }, { LogicalOrExpression : ， BitwiseAndExpression, ( ?/|| ) }, { LogicalOrExpression : ， LogicalOrExpression || BitwiseAndExpression, ( ?/|| ) }, { BitwiseAndExpression : ， EqualityExpression, ( ?/||/& ) }, { BitwiseAndExpression : ， BitwiseAndExpression & EqualityExpression, ( ?/||/& ) }, { EqualityExpression : ， RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression == RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression != RelationalExpression, ( ?/||/&/==/!= ) }, { RelationalExpression : ， ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression < ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression > ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression <= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression >= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { ShiftExpression : ， AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression << AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression >> AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { AdditiveExpression : ， MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression + MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression - MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { MultiplicativeExpression : ， UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression * UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression / UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression % UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， PostfixExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， delete LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， void UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ++ LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， -- LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， + UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， - UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ~ UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ! UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression ++, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression --, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { LeftSideExpression : ， CallExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { LeftSideExpression : ， ShortNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， PrimaryExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， FullNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression MemberOperator, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FullNewExpression : ， new FullNewSubexpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ShortNewExpression : ， new ShortNewSubexpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ElementList ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { FieldList }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， AnonymousFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， NamedFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， SimpleExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， FunctionExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， ObjectLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， this, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， null, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， true, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， false, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， String, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ParenthesizedExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ArrayLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ParenthesizedExpression : ， ( Expression ), ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Identifier : ， identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Number : ， number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { String : ， string, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, identifier) => ((r2031625), (s15))
[W] CONFLICT: ((126) { { AnonymousFunction : ， function FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { NamedFunction : ， function Identifier FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { AssignmentExpression : ， ConditionalExpression, (  ) }, { AssignmentExpression : ， LeftSideExpression = AssignmentExpression, (  ) }, { AssignmentExpression : LeftSideExpression = ， AssignmentExpression, ( ;/,/)/]/:/} ) }, { AssignmentExpression : ， LeftSideExpression CompoundAssignment AssignmentExpression, (  ) }, { CompoundAssignment : = ，, ( number/string/identifier/{/function/(/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { ConditionalExpression : ， LogicalOrExpression, (  ) }, { ConditionalExpression : ， LogicalOrExpression ? AssignmentExpression : AssignmentExpression, (  ) }, { LogicalOrExpression : ， BitwiseAndExpression, ( ?/|| ) }, { LogicalOrExpression : ， LogicalOrExpression || BitwiseAndExpression, ( ?/|| ) }, { BitwiseAndExpression : ， EqualityExpression, ( ?/||/& ) }, { BitwiseAndExpression : ， BitwiseAndExpression & EqualityExpression, ( ?/||/& ) }, { EqualityExpression : ， RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression == RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression != RelationalExpression, ( ?/||/&/==/!= ) }, { RelationalExpression : ， ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression < ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression > ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression <= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression >= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { ShiftExpression : ， AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression << AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression >> AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { AdditiveExpression : ， MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression + MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression - MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { MultiplicativeExpression : ， UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression * UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression / UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression % UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， PostfixExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， delete LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， void UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ++ LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， -- LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， + UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， - UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ~ UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ! UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression ++, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression --, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { LeftSideExpression : ， CallExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { LeftSideExpression : ， ShortNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， PrimaryExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， FullNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression MemberOperator, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FullNewExpression : ， new FullNewSubexpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ShortNewExpression : ， new ShortNewSubexpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ElementList ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { FieldList }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， AnonymousFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， NamedFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， SimpleExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， FunctionExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， ObjectLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， this, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， null, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， true, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， false, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， String, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ParenthesizedExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ArrayLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ParenthesizedExpression : ， ( Expression ), ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Identifier : ， identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Number : ， number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { String : ， string, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, number) => ((r2031625), (s19))
[W] CONFLICT: ((126) { { AnonymousFunction : ， function FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { NamedFunction : ， function Identifier FormalParametersAndBody, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./( ) }, { AssignmentExpression : ， ConditionalExpression, (  ) }, { AssignmentExpression : ， LeftSideExpression = AssignmentExpression, (  ) }, { AssignmentExpression : LeftSideExpression = ， AssignmentExpression, ( ;/,/)/]/:/} ) }, { AssignmentExpression : ， LeftSideExpression CompoundAssignment AssignmentExpression, (  ) }, { CompoundAssignment : = ，, ( number/string/identifier/{/function/(/+/-/delete/void/++/--/~/!/new/[/this/null/true/false ) }, { ConditionalExpression : ， LogicalOrExpression, (  ) }, { ConditionalExpression : ， LogicalOrExpression ? AssignmentExpression : AssignmentExpression, (  ) }, { LogicalOrExpression : ， BitwiseAndExpression, ( ?/|| ) }, { LogicalOrExpression : ， LogicalOrExpression || BitwiseAndExpression, ( ?/|| ) }, { BitwiseAndExpression : ， EqualityExpression, ( ?/||/& ) }, { BitwiseAndExpression : ， BitwiseAndExpression & EqualityExpression, ( ?/||/& ) }, { EqualityExpression : ， RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression == RelationalExpression, ( ?/||/&/==/!= ) }, { EqualityExpression : ， EqualityExpression != RelationalExpression, ( ?/||/&/==/!= ) }, { RelationalExpression : ， ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression < ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression > ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression <= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { RelationalExpression : ， RelationalExpression >= ShiftExpression, ( ?/||/&/==/!=/</>/<=/>= ) }, { ShiftExpression : ， AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression << AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { ShiftExpression : ， ShiftExpression >> AdditiveExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>> ) }, { AdditiveExpression : ， MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression + MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { AdditiveExpression : ， AdditiveExpression - MultiplicativeExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/- ) }, { MultiplicativeExpression : ， UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression * UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression / UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { MultiplicativeExpression : ， MultiplicativeExpression % UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， PostfixExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， delete LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， void UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ++ LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， -- LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， + UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， - UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ~ UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { UnaryExpression : ， ! UnaryExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression ++, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { PostfixExpression : ， LeftSideExpression --, ( ?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///% ) }, { LeftSideExpression : ， CallExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { LeftSideExpression : ， ShortNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， PrimaryExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， FullNewExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression MemberOperator, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { CallExpression : ， CallExpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FullNewExpression : ， new FullNewSubexpression Arguments, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ShortNewExpression : ， new ShortNewSubexpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ArrayLiteral : ， [ ElementList ], ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ObjectLiteral : ， { FieldList }, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， AnonymousFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { FunctionExpression : ， NamedFunction, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， SimpleExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， FunctionExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { PrimaryExpression : ， ObjectLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， this, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， null, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， true, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， false, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， String, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， Identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ParenthesizedExpression, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { SimpleExpression : ， ArrayLiteral, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { ParenthesizedExpression : ， ( Expression ), ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Identifier : ， identifier, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { Number : ， number, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) }, { String : ， string, ( =/<<=/>>=/%=/-=/+=//=/*=/&=/^=/[/./(/?/||/&/==/!=/</>/<=/>=/<</>>/+/-/*///%/++/-- ) } }, string) => ((r2031625), (s21))
"create parsing table" costs 6.86 seconds.
"build parser" costs 293.06 seconds.
>> [S] `if`. Goto state 16.
>> [S] `(`. Goto state 2.
>> [S] `identifier`. Goto state 15.
>> [R] `identifier` to `Identifier`. Goto state 47.
>> [R] `Identifier` to `SimpleExpression`. Goto state 62.
>> [R] `SimpleExpression` to `PrimaryExpression`. Goto state 57.
>> [R] `PrimaryExpression` to `CallExpression`. Goto state 36.
>> [S] `[`. Goto state 148.
>> [S] `identifier`. Goto state 15.
>> [R] `identifier` to `Identifier`. Goto state 47.
>> [R] `Identifier` to `SimpleExpression`. Goto state 62.
>> [R] `SimpleExpression` to `PrimaryExpression`. Goto state 57.
>> [R] `PrimaryExpression` to `CallExpression`. Goto state 36.
>> [R] `CallExpression` to `LeftSideExpression`. Goto state 49.
>> [R] `LeftSideExpression` to `PostfixExpression`. Goto state 56.
>> [R] `PostfixExpression` to `UnaryExpression`. Goto state 68.
>> [R] `UnaryExpression` to `MultiplicativeExpression`. Goto state 51.
>> [R] `MultiplicativeExpression` to `AdditiveExpression`. Goto state 29.
>> [R] `AdditiveExpression` to `ShiftExpression`. Goto state 60.
>> [R] `ShiftExpression` to `RelationalExpression`. Goto state 58.
>> [R] `RelationalExpression` to `EqualityExpression`. Goto state 40.
>> [R] `EqualityExpression` to `BitwiseAndExpression`. Goto state 33.
>> [R] `BitwiseAndExpression` to `LogicalOrExpression`. Goto state 50.
>> [R] `LogicalOrExpression` to `ConditionalExpression`. Goto state 37.
>> [R] `ConditionalExpression` to `AssignmentExpression`. Goto state 32.
>> [R] `AssignmentExpression` to `Expression`. Goto state 161.
>> [S] `]`. Goto state 208.
>> [R] `[ Expression ]` to `MemberOperator`. Goto state 150.
>> [R] `CallExpression MemberOperator` to `CallExpression`. Goto state 36.
>> [R] `CallExpression` to `LeftSideExpression`. Goto state 49.
>> [R] `LeftSideExpression` to `PostfixExpression`. Goto state 56.
>> [R] `PostfixExpression` to `UnaryExpression`. Goto state 68.
>> [R] `UnaryExpression` to `MultiplicativeExpression`. Goto state 51.
>> [R] `MultiplicativeExpression` to `AdditiveExpression`. Goto state 29.
>> [R] `AdditiveExpression` to `ShiftExpression`. Goto state 60.
>> [R] `ShiftExpression` to `RelationalExpression`. Goto state 58.
>> [S] `<=`. Goto state 136.
>> [S] `identifier`. Goto state 15.
>> [R] `identifier` to `Identifier`. Goto state 47.
>> [R] `Identifier` to `SimpleExpression`. Goto state 62.
>> [R] `SimpleExpression` to `PrimaryExpression`. Goto state 57.
>> [R] `PrimaryExpression` to `CallExpression`. Goto state 36.
>> [R] `CallExpression` to `LeftSideExpression`. Goto state 100.
>> [R] `LeftSideExpression` to `PostfixExpression`. Goto state 56.
>> [R] `PostfixExpression` to `UnaryExpression`. Goto state 68.
>> [R] `UnaryExpression` to `MultiplicativeExpression`. Goto state 51.
>> [R] `MultiplicativeExpression` to `AdditiveExpression`. Goto state 29.
>> [R] `AdditiveExpression` to `ShiftExpression`. Goto state 175.
>> [R] `RelationalExpression <= ShiftExpression` to `RelationalExpression`. Goto state 58.
>> [R] `RelationalExpression` to `EqualityExpression`. Goto state 40.
>> [R] `EqualityExpression` to `BitwiseAndExpression`. Goto state 33.
>> [R] `BitwiseAndExpression` to `LogicalOrExpression`. Goto state 50.
>> [R] `LogicalOrExpression` to `ConditionalExpression`. Goto state 37.
>> [R] `ConditionalExpression` to `AssignmentExpression`. Goto state 32.
>> [R] `AssignmentExpression` to `Expression`. Goto state 95.
>> [S] `)`. Goto state 189.
>> [R] `( Expression )` to `ParenthesizedExpression`. Goto state 89.
>> [S] `{`. Goto state 27.
>> [S] `identifier`. Goto state 15.
>> [R] `identifier` to `Identifier`. Goto state 76.
>> [R] `Identifier` to `SimpleExpression`. Goto state 62.
>> [R] `SimpleExpression` to `PrimaryExpression`. Goto state 57.
>> [R] `PrimaryExpression` to `CallExpression`. Goto state 36.
>> [S] `.`. Goto state 147.
>> [S] `identifier`. Goto state 15.
>> [R] `identifier` to `Identifier`. Goto state 192.
>> [R] `. Identifier` to `MemberOperator`. Goto state 150.
>> [R] `CallExpression MemberOperator` to `CallExpression`. Goto state 36.
>> [S] `(`. Goto state 146.
>> [S] `identifier`. Goto state 15.
>> [R] `identifier` to `Identifier`. Goto state 47.
>> [R] `Identifier` to `SimpleExpression`. Goto state 62.
>> [R] `SimpleExpression` to `PrimaryExpression`. Goto state 57.
>> [R] `PrimaryExpression` to `CallExpression`. Goto state 36.
>> [S] `[`. Goto state 148.
>> [S] `identifier`. Goto state 15.
>> [R] `identifier` to `Identifier`. Goto state 47.
>> [R] `Identifier` to `SimpleExpression`. Goto state 62.
>> [R] `SimpleExpression` to `PrimaryExpression`. Goto state 57.
>> [R] `PrimaryExpression` to `CallExpression`. Goto state 36.
>> [R] `CallExpression` to `LeftSideExpression`. Goto state 49.
>> [R] `LeftSideExpression` to `PostfixExpression`. Goto state 56.
>> [R] `PostfixExpression` to `UnaryExpression`. Goto state 68.
>> [R] `UnaryExpression` to `MultiplicativeExpression`. Goto state 51.
>> [R] `MultiplicativeExpression` to `AdditiveExpression`. Goto state 29.
>> [R] `AdditiveExpression` to `ShiftExpression`. Goto state 60.
>> [R] `ShiftExpression` to `RelationalExpression`. Goto state 58.
>> [R] `RelationalExpression` to `EqualityExpression`. Goto state 40.
>> [R] `EqualityExpression` to `BitwiseAndExpression`. Goto state 33.
>> [R] `BitwiseAndExpression` to `LogicalOrExpression`. Goto state 50.
>> [R] `LogicalOrExpression` to `ConditionalExpression`. Goto state 37.
>> [R] `ConditionalExpression` to `AssignmentExpression`. Goto state 32.
>> [R] `AssignmentExpression` to `Expression`. Goto state 161.
>> [S] `]`. Goto state 208.
>> [R] `[ Expression ]` to `MemberOperator`. Goto state 150.
>> [R] `CallExpression MemberOperator` to `CallExpression`. Goto state 36.
>> [R] `CallExpression` to `LeftSideExpression`. Goto state 49.
>> [R] `LeftSideExpression` to `PostfixExpression`. Goto state 56.
>> [R] `PostfixExpression` to `UnaryExpression`. Goto state 68.
>> [R] `UnaryExpression` to `MultiplicativeExpression`. Goto state 51.
>> [R] `MultiplicativeExpression` to `AdditiveExpression`. Goto state 29.
>> [R] `AdditiveExpression` to `ShiftExpression`. Goto state 60.
>> [R] `ShiftExpression` to `RelationalExpression`. Goto state 58.
>> [R] `RelationalExpression` to `EqualityExpression`. Goto state 40.
>> [R] `EqualityExpression` to `BitwiseAndExpression`. Goto state 33.
>> [R] `BitwiseAndExpression` to `LogicalOrExpression`. Goto state 50.
>> [R] `LogicalOrExpression` to `ConditionalExpression`. Goto state 37.
>> [R] `ConditionalExpression` to `AssignmentExpression`. Goto state 168.
>> [R] `AssignmentExpression` to `ArgumentList`. Goto state 167.
>> [S] `)`. Goto state 210.
>> [R] `( ArgumentList )` to `Arguments`. Goto state 149.
>> [R] `CallExpression Arguments` to `CallExpression`. Goto state 36.
>> [R] `CallExpression` to `LeftSideExpression`. Goto state 49.
>> [R] `LeftSideExpression` to `PostfixExpression`. Goto state 56.
>> [R] `PostfixExpression` to `UnaryExpression`. Goto state 68.
>> [R] `UnaryExpression` to `MultiplicativeExpression`. Goto state 51.
>> [R] `MultiplicativeExpression` to `AdditiveExpression`. Goto state 29.
>> [R] `AdditiveExpression` to `ShiftExpression`. Goto state 60.
>> [R] `ShiftExpression` to `RelationalExpression`. Goto state 58.
>> [R] `RelationalExpression` to `EqualityExpression`. Goto state 40.
>> [R] `EqualityExpression` to `BitwiseAndExpression`. Goto state 33.
>> [R] `BitwiseAndExpression` to `LogicalOrExpression`. Goto state 50.
>> [R] `LogicalOrExpression` to `ConditionalExpression`. Goto state 37.
>> [R] `ConditionalExpression` to `AssignmentExpression`. Goto state 32.
>> [R] `AssignmentExpression` to `Expression`. Goto state 41.
>> [R] `Expression` to `ExpressionStatement`. Goto state 42.
>> [S] `;`. Goto state 80.
>> [R] `ExpressionStatement ;` to `Statement`. Goto state 79.
>> [R] `Statement` to `BlockStatementsPrefix`. Goto state 74.
>> [R] `BlockStatementsPrefix` to `BlockStatements`. Goto state 73.
>> [S] `}`. Goto state 157.
>> [R] `{ BlockStatements }` to `Block`. Goto state 34.
>> [R] `Block` to `Statement`. Goto state 152.
>> [R] `if ParenthesizedExpression Statement` to `IfStatement`. Goto state 48.
>> [R] `IfStatement` to `Statement`. Goto state 63.
[E] unexpected symbol else at 4:1
