"build parser" at 17:38:53.
"create LR0 itemsets" at 17:38:53.
"create LR0 itemsets" costs 124.41 seconds.
"calculate forwards and propagations" at 17:40:58.
"add forwards and propagations" at 17:40:58.
"add forwards and propagations" costs 156.04 seconds.
"clean up" at 17:43:34.
"clean up" costs 0.16 seconds.
"calculate forwards and propagations" costs 156.21 seconds.
"propagate forwards" at 17:43:34.
"propagate forwards" costs 2.19 seconds.
"create parsing table" at 17:43:36.
[W] CONFLICT: (88, ,) => ((r458752), (s154))
[W] CONFLICT: (152, else) => ((r917504), (s202))
[W] CONFLICT: (52, [) => ((r1376256), (r3932161))
[W] CONFLICT: (52, () => ((r1376256), (r3932161))
[W] CONFLICT: (52, ;) => ((r1376256), (r3932161))
[W] CONFLICT: (52, +) => ((r1376256), (r3932161))
[W] CONFLICT: (52, -) => ((r1376256), (r3932161))
[W] CONFLICT: (52, ++) => ((r1376256), (r3932161))
[W] CONFLICT: (52, --) => ((r1376256), (r3932161))
[W] CONFLICT: (126, function) => ((s14), (r2031625))
[W] CONFLICT: (126, delete) => ((r2031625), (s11))
[W] CONFLICT: (126, void) => ((r2031625), (s25))
[W] CONFLICT: (126, ++) => ((r2031625), (s4))
[W] CONFLICT: (126, --) => ((r2031625), (s6))
[W] CONFLICT: (126, +) => ((r2031625), (s3))
[W] CONFLICT: (126, -) => ((r2031625), (s5))
[W] CONFLICT: (126, ~) => ((r2031625), (s28))
[W] CONFLICT: (126, !) => ((r2031625), (s1))
[W] CONFLICT: (126, new) => ((r2031625), (s17))
[W] CONFLICT: (126, new) => ((r2031625), (s17))
[W] CONFLICT: (126, [) => ((r2031625), (s8))
[W] CONFLICT: (126, [) => ((r2031625), (s8))
[W] CONFLICT: (126, {) => ((r2031625), (s92))
[W] CONFLICT: (126, {) => ((r2031625), (s92))
[W] CONFLICT: (126, this) => ((r2031625), (s22))
[W] CONFLICT: (126, null) => ((r2031625), (s18))
[W] CONFLICT: (126, true) => ((r2031625), (s23))
[W] CONFLICT: (126, false) => ((r2031625), (s12))
[W] CONFLICT: (126, () => ((r2031625), (s2))
[W] CONFLICT: (126, identifier) => ((r2031625), (s15))
[W] CONFLICT: (126, number) => ((r2031625), (s19))
[W] CONFLICT: (126, string) => ((r2031625), (s21))
"create parsing table" costs 2.32 seconds.
"build parser" costs 285.70 seconds.
>> Shift	`function`. Goto state 14.
>> Shift	`identifier`. Goto state 15.
>> Reduce	`identifier` to `Identifier`. Goto state 116.
>> Shift	`(`. Goto state 114.
>> Shift	`identifier`. Goto state 15.
>> Reduce	`identifier` to `Identifier`. Goto state 188.
>> Reduce	`Identifier` to `FormalParameter`. Goto state 185.
>> Reduce	`FormalParameter` to `FormalParametersPrefix`. Goto state 187.
>> Reduce	`FormalParametersPrefix` to `FormalParameters`. Goto state 186.
>> Shift	`)`. Goto state 206.
>> Shift	`{`. Goto state 217.
>> Shift	`return`. Goto state 20.
>> Shift	`number`. Goto state 19.
>> Reduce	`number` to `Number`. Goto state 53.
>> Reduce	`Number` to `SimpleExpression`. Goto state 62.
>> Reduce	`SimpleExpression` to `PrimaryExpression`. Goto state 57.
>> Reduce	`PrimaryExpression` to `CallExpression`. Goto state 36.
>> Reduce	`CallExpression` to `LeftSideExpression`. Goto state 49.
>> Reduce	`LeftSideExpression` to `PostfixExpression`. Goto state 56.
>> Reduce	`PostfixExpression` to `UnaryExpression`. Goto state 68.
>> Reduce	`UnaryExpression` to `MultiplicativeExpression`. Goto state 51.
>> Reduce	`MultiplicativeExpression` to `AdditiveExpression`. Goto state 29.
>> Reduce	`AdditiveExpression` to `ShiftExpression`. Goto state 60.
>> Reduce	`ShiftExpression` to `RelationalExpression`. Goto state 58.
>> Reduce	`RelationalExpression` to `EqualityExpression`. Goto state 40.
>> Reduce	`EqualityExpression` to `BitwiseAndExpression`. Goto state 33.
>> Reduce	`BitwiseAndExpression` to `LogicalOrExpression`. Goto state 50.
>> Reduce	`LogicalOrExpression` to `ConditionalExpression`. Goto state 37.
>> Reduce	`ConditionalExpression` to `AssignmentExpression`. Goto state 32.
>> Reduce	`AssignmentExpression` to `Expression`. Goto state 93.
>> Reduce	`Expression` to `OptionalExpession`. Goto state 94.
>> Reduce	`return OptionalExpession` to `ReturnStatement`. Goto state 59.
>> Shift	`;`. Goto state 84.
>> Reduce	`ReturnStatement ;` to `Statement`. Goto state 63.
>> Reduce	`Statement` to `TopStatement`. Goto state 65.
>> Reduce	`TopStatement` to `TopStatementsPrefix`. Goto state 67.
>> Reduce	`TopStatementsPrefix` to `TopStatements`. Goto state 219.
>> Shift	`}`. Goto state 222.
>> Reduce	`( FormalParameters ) { TopStatements }` to `FormalParametersAndBody`. Goto state 184.
>> Reduce	`function Identifier FormalParametersAndBody` to `NamedFunction`. Goto state 52.
>> Reduce	`NamedFunction` to `FunctionDefination`. Goto state 45.
>> Reduce	`FunctionDefination` to `TopStatement`. Goto state 65.
>> Reduce	`TopStatement` to `TopStatementsPrefix`. Goto state 67.
>> Reduce	`TopStatementsPrefix` to `TopStatements`. Goto state 66.

=====================Accept=====================

================== SyntaxTree ==================
©¸©¤©¤©¤ named-function
     ©À©¤©¤©¤ empty
     ©¸©¤©¤©¤ function-parameters-and-body
          ©À©¤©¤©¤ x
          ©¸©¤©¤©¤ return
               ©¸©¤©¤©¤ 0

