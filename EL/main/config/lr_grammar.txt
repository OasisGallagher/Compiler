Program
	: TopStatements		$$ = $1

TopStatements
	: epsilon				$$ = $0
	| TopStatementsPrefix	$$ = $1

TopStatementsPrefix
	: TopStatement						$$ = $1
	| TopStatementsPrefix TopStatement	$$ = make("statememts", $2, $1)

TopStatement
	: Statement				$$ = $1
	| FunctionDefination	$$ = $1

Statement
	: EmptyStatement				$$ = $1
	| ExpressionStatement ;			$$ = $2
	| VariableDefination ;			$$ = $2
	| Block							$$ = $1
	| IfStatement					$$ = $1
	| WhileStatement				$$ = $1
	| ForStatement					$$ = $1
	| ContinueStatement ;			$$ = $1
	| BreakStatement ;				$$ = $1
	| ReturnStatement ;				$$ = $1

EmptyStatement
	: ;						$$ = $1
	
ExpressionStatement
	: Expression			$$ = $1

VariableDefination
	: var VariableDeclarationList	$$ = make("var-def", $1)

VariableDeclarationList
	: VariableDeclaration							$$ = $1
	| VariableDeclarationList, VariableDefination	$$ = make("var-decl-list", $2, $1)

VariableDeclaration
	: Identifier VariableInitializer				$$ = make("var-decl", $2, $1)

VariableInitializer
	: epsilon					$$ = $0
	| = AssignmentExpression	$$ = make("var-initializer", $1)

Block
	: { BlockStatements }		$$ = $2

BlockStatements
	: epsilon					$$ = $0
	| BlockStatementsPrefix		$$ = $1

BlockStatementsPrefix
	: Statement							$$ = $1
	| BlockStatementsPrefix Statement	$$ = make("block-statements", $2, $1)

IfStatement
	: if ParenthesizedExpression Statement					$$ = make("if", $2, $1, $0)
	| if ParenthesizedExpression Statement else Statement	$$ = make("if", $4, $3, $1)
	
WhileStatement
	: while ParenthesizedExpression Statement	$$ = make("while", $2, $1)
	
ForStatement
	: for ( ForInitializer ; OptionalExpession ; OptionalExpession ) Statement	$$ = make("for", $7, $5, $3, $1)
	
ForInitializer
	: epsilon						$$ = $0
	| Expression					$$ = $1
	| var VariableDeclarationList	$$ = make("for-initializer", $1)
	
ContinueStatement
	: continue	$$ = make("continue")
	
BreakStatement
	: break		$$ = make("break")
	
ReturnStatement
	: return OptionalExpession	$$ = make("return", $1)
	
FunctionDefination
	: NamedFunction			$$ = $1

AnonymousFunction
	: function FormalParametersAndBody	$$ = make("anonymous-function", $1)
	
NamedFunction
	: function Identifier FormalParametersAndBody	$$ = make("named-function", $2, $1)
	
FormalParametersAndBody
	: ( FormalParameters ) { TopStatements }		$$ = make("function-parameters-and-body", $5, $2)
	
FormalParameters
	: epsilon					$$ = $0
	| FormalParametersPrefix	$$ = $1
	
FormalParametersPrefix
	: FormalParameter								$$ = $1
	| FormalParametersPrefix , FormalParameter		$$ = make("formal-parameters-prefix", $3, $1)
	
FormalParameter
	: Identifier	$$ = $1
	
Expression
	: AssignmentExpression					$$ = $1
	| Expression , AssignmentExpression		$$ = make("expression", $3, $1)
	
OptionalExpession
	: epsilon		$$ = $0
	| Expression	$$ = $1
	
AssignmentExpression
	: ConditionalExpression											$$ = $1
	| LeftSideExpression = AssignmentExpression						$$ = make("=", $3, $1)
	| LeftSideExpression CompoundAssignment AssignmentExpression	$$ = make("compound-assignment-expression", $3, $2, $1)
	
CompoundAssignment
	: *=	$$ = make("*=")
	| /=	$$ = make("/=")
	| %=	$$ = make("%=")
	| +=	$$ = make("+=")
	| -=	$$ = make("-=")
	| <<=	$$ = make("<<=")
	| >>=	$$ = make(">>=")
	| &=	$$ = make("&=")
	| ^=	$$ = make("^=")
	| |=	$$ = make("|=")

ConditionalExpression
	: LogicalOrExpression													$$ = $1
	| LogicalOrExpression ? AssignmentExpression : AssignmentExpression		$$ = make("?:", $3, $1)
	
LogicalAndExpression
	: BitwiseOrExpression							$$ = $1
	| LogicalAndExpression && BitwiseOrExpression	$$ = make("&&", $3, $1)
	
LogicalOrExpression
	: BitwiseAndExpression							$$ = $1
	| LogicalOrExpression || BitwiseAndExpression	$$ = make("||", $3, $1)
	
BitwiseAndExpression
	: EqualityExpression							$$ = $1
	| BitwiseAndExpression & EqualityExpression		$$ = make("&", $3, $1)
	
BitwiseXorExpression
	: BitwiseAndExpression							$$ = $1
	| BitwiseXorExpression ^ BitwiseAndExpression	$$ = make("^", $3, $1)
	
BitwiseOrExpression
	: BitwiseXorExpression							$$ = $1
	| BitwiseOrExpression | BitwiseXorExpression	$$ = make("|", $3, $1)

EqualityExpression
	: RelationalExpression							$$ = $1
	| EqualityExpression == RelationalExpression	$$ = make("==", $3, $1)
	| EqualityExpression != RelationalExpression	$$ = make("!=", $3, $1)
	
RelationalExpression
	: ShiftExpression								$$ = $1
	| RelationalExpression < ShiftExpression		$$ = make("<", $3, $1)
	| RelationalExpression > ShiftExpression		$$ = make(">", $3, $1)
	| RelationalExpression <= ShiftExpression		$$ = make("<=", $3, $1)
	| RelationalExpression >= ShiftExpression		$$ = make(">=", $3, $1)
	
ShiftExpression
	: AdditiveExpression							$$ = $1
	| ShiftExpression << AdditiveExpression			$$ = make("<<", $3, $1)
	| ShiftExpression >> AdditiveExpression			$$ = make(">>", $3, $1)
	
AdditiveExpression
	: MultiplicativeExpression						$$ = $1
	| AdditiveExpression + MultiplicativeExpression	$$ = make("+", $3, $1)
	| AdditiveExpression - MultiplicativeExpression	$$ = make("-", $3, $1)
	
MultiplicativeExpression
	: UnaryExpression								$$ = $1
	| MultiplicativeExpression * UnaryExpression	$$ = make("*", $3, $1)
	| MultiplicativeExpression / UnaryExpression	$$ = make("/", $3, $1)
	| MultiplicativeExpression % UnaryExpression	$$ = make("%", $3, $1)
	
UnaryExpression
	: PostfixExpression					$$ = $1
	| delete LeftSideExpression			$$ = make("delete", $1)
	| void UnaryExpression				$$ = make("void", $1)
	| ++ LeftSideExpression				$$ = make("++", $1)
	| -- LeftSideExpression				$$ = make("--", $1)
	| + UnaryExpression					$$ = make("positive", $1)
	| - UnaryExpression					$$ = make("negative", $1)
	| ~ UnaryExpression					$$ = make("~", $1)
	| ! UnaryExpression					$$ = make("!", $1)
	
PostfixExpression
	: LeftSideExpression				$$ = $1
	| LeftSideExpression ++				$$ = make("v++", $2)
	| LeftSideExpression --				$$ = make("v--", $2)
	
LeftSideExpression
	: CallExpression		$$ = $1
	| ShortNewExpression	$$ = $1
	
CallExpression
	: PrimaryExpression					$$ = $1
	| FullNewExpression					$$ = $1
	| CallExpression MemberOperator		$$ = make("callm", $1)
	| CallExpression Arguments			$$ = make("calla", $1)
	
FullNewExpression
	: new FullNewSubexpression Arguments	$$ = make("newf", $2, $1)
	
ShortNewExpression
	: new ShortNewSubexpression				$$ = make("news", $1)
	
FullNewSubexpression
	: PrimaryExpression						$$ = $1
	| FullNewExpression						$$ = $1
	| FullNewSubexpression MemberOperator	$$ = make("newfs", $1)
	
ShortNewSubexpression
	: FullNewSubexpression		$$ = $1
	| ShortNewExpression		$$ = $1
	
MemberOperator
	: [ Expression ]			$$ = make("[]", $2)
	| . Identifier				$$ = make(".", $1)
	
Arguments
	: ( )						$$ = make("arguments", $0)
	| ( ArgumentList )			$$ = make("arguments", $2)
	
ArgumentList
	: AssignmentExpression					$$ = $1
	| ArgumentList , AssignmentExpression	$$ = make("argument-list", $3, $1)
	
ArrayLiteral
	: [ ]									$$ = make("()", $0)
	| [ ElementList ]						$$ = make("()", $2)
	
ElementList
	: LiteralElement						$$ = $1
	| ElementList , LiteralElement			$$ = make("element-list", $3, $1)
	
LiteralElement
	: AssignmentExpression					$$ = $1
	
ObjectLiteral
	: { }				$$ = make("{}", $0)
	| { FieldList }		$$ = make("{}", $2)
	
FieldList
	: LiteralField					$$ = $1
	| FieldList , LiteralField		$$ = make("field-list", $3, $1)
	
LiteralField
	: Identifier : AssignmentExpression		$$ = make("literal-field", $3, $1)
	
FunctionExpression
	: AnonymousFunction			$$ = $1
	| NamedFunction				$$ = $1
	
PrimaryExpression
	: SimpleExpression		$$ = $1
	| FunctionExpression	$$ = $1
	| ObjectLiteral			$$ = $1
	
SimpleExpression
	: this						$$ = make("this")
	| null						$$ = make("null")
	| true						$$ = make("true")
	| false						$$ = make("false")
	| Number					$$ = $1
	| String					$$ = $1
	| Identifier				$$ = $1
	| ParenthesizedExpression	$$ = $1
	| ArrayLiteral				$$ = $1
	
ParenthesizedExpression
	: ( Expression )			$$ = $2
	
Identifier
	: identifier	$$ = symbol($1)
	
Number
	: number		$$ = constant($1)

String
	: string		$$ = literal($1)
